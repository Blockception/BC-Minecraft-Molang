// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`molang - syntax should be able to parse and match the syntax tree generated 0. variable.agent.anim_state == 2 1`] = `
[
  {
    "position": 0,
    "statements": [
      {
        "names": [
          "agent",
          "anim_state",
        ],
        "position": 0,
        "scope": "variable",
        "type": 7,
      },
      {
        "left": {},
        "operator": "==",
        "position": 26,
        "right": {},
        "type": 2,
      },
      {
        "position": 29,
        "type": 1,
        "value": "2",
      },
    ],
    "type": 4,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 1. variable.agent.anim_state > 2 1`] = `
[
  {
    "position": 0,
    "statements": [
      {
        "names": [
          "agent",
          "anim_state",
        ],
        "position": 0,
        "scope": "variable",
        "type": 7,
      },
      {
        "left": {},
        "operator": ">",
        "position": 26,
        "right": {},
        "type": 2,
      },
      {
        "position": 28,
        "type": 1,
        "value": "2",
      },
    ],
    "type": 4,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 2. variable.agent.anim_state < 2 1`] = `
[
  {
    "position": 0,
    "statements": [
      {
        "names": [
          "agent",
          "anim_state",
        ],
        "position": 0,
        "scope": "variable",
        "type": 7,
      },
      {
        "left": {},
        "operator": "<",
        "position": 26,
        "right": {},
        "type": 2,
      },
      {
        "position": 28,
        "type": 1,
        "value": "2",
      },
    ],
    "type": 4,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 3. variable.agent.anim_state != 2 1`] = `
[
  {
    "position": 0,
    "statements": [
      {
        "names": [
          "agent",
          "anim_state",
        ],
        "position": 0,
        "scope": "variable",
        "type": 7,
      },
      {
        "left": {},
        "operator": "!=",
        "position": 26,
        "right": {},
        "type": 2,
      },
      {
        "position": 29,
        "type": 1,
        "value": "2",
      },
    ],
    "type": 4,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 4. variable.agent.anim_state >= 2 1`] = `
[
  {
    "position": 0,
    "statements": [
      {
        "names": [
          "agent",
          "anim_state",
        ],
        "position": 0,
        "scope": "variable",
        "type": 7,
      },
      {
        "left": {},
        "operator": ">=",
        "position": 26,
        "right": {},
        "type": 2,
      },
      {
        "position": 29,
        "type": 1,
        "value": "2",
      },
    ],
    "type": 4,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 5. variable.agent.anim_state <= 2 1`] = `
[
  {
    "position": 0,
    "statements": [
      {
        "names": [
          "agent",
          "anim_state",
        ],
        "position": 0,
        "scope": "variable",
        "type": 7,
      },
      {
        "left": {},
        "operator": "<=",
        "position": 26,
        "right": {},
        "type": 2,
      },
      {
        "position": 29,
        "type": 1,
        "value": "2",
      },
    ],
    "type": 4,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 6. !variable.swaying && query.all_animations_finished 1`] = `
[
  {
    "position": 0,
    "statements": [
      {
        "operand": {},
        "operator": "!",
        "position": 0,
        "type": 6,
      },
      {
        "names": [
          "swaying",
        ],
        "position": 1,
        "scope": "variable",
        "type": 7,
      },
      {
        "left": {},
        "operator": "&&",
        "position": 18,
        "right": {},
        "type": 2,
      },
      {
        "arguments": [],
        "names": [
          "all_animations_finished",
        ],
        "namespace": "query",
        "position": 21,
        "type": 4,
      },
    ],
    "type": 4,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 7. v.agent.anim_state == 2 1`] = `
[
  {
    "position": 0,
    "statements": [
      {
        "names": [
          "agent",
          "anim_state",
        ],
        "position": 0,
        "scope": "v",
        "type": 7,
      },
      {
        "left": {},
        "operator": "==",
        "position": 19,
        "right": {},
        "type": 2,
      },
      {
        "position": 22,
        "type": 1,
        "value": "2",
      },
    ],
    "type": 4,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 8. v.agent.anim_state > 2 1`] = `
[
  {
    "position": 0,
    "statements": [
      {
        "names": [
          "agent",
          "anim_state",
        ],
        "position": 0,
        "scope": "v",
        "type": 7,
      },
      {
        "left": {},
        "operator": ">",
        "position": 19,
        "right": {},
        "type": 2,
      },
      {
        "position": 21,
        "type": 1,
        "value": "2",
      },
    ],
    "type": 4,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 9. v.agent.anim_state < 2 1`] = `
[
  {
    "position": 0,
    "statements": [
      {
        "names": [
          "agent",
          "anim_state",
        ],
        "position": 0,
        "scope": "v",
        "type": 7,
      },
      {
        "left": {},
        "operator": "<",
        "position": 19,
        "right": {},
        "type": 2,
      },
      {
        "position": 21,
        "type": 1,
        "value": "2",
      },
    ],
    "type": 4,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 10. v.agent.anim_state != 2 1`] = `
[
  {
    "position": 0,
    "statements": [
      {
        "names": [
          "agent",
          "anim_state",
        ],
        "position": 0,
        "scope": "v",
        "type": 7,
      },
      {
        "left": {},
        "operator": "!=",
        "position": 19,
        "right": {},
        "type": 2,
      },
      {
        "position": 22,
        "type": 1,
        "value": "2",
      },
    ],
    "type": 4,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 11. v.agent.anim_state >= 2 1`] = `
[
  {
    "position": 0,
    "statements": [
      {
        "names": [
          "agent",
          "anim_state",
        ],
        "position": 0,
        "scope": "v",
        "type": 7,
      },
      {
        "left": {},
        "operator": ">=",
        "position": 19,
        "right": {},
        "type": 2,
      },
      {
        "position": 22,
        "type": 1,
        "value": "2",
      },
    ],
    "type": 4,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 12. v.agent.anim_state <= 2 1`] = `
[
  {
    "position": 0,
    "statements": [
      {
        "names": [
          "agent",
          "anim_state",
        ],
        "position": 0,
        "scope": "v",
        "type": 7,
      },
      {
        "left": {},
        "operator": "<=",
        "position": 19,
        "right": {},
        "type": 2,
      },
      {
        "position": 22,
        "type": 1,
        "value": "2",
      },
    ],
    "type": 4,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 13. !v.swaying && q.all_animations_finished 1`] = `
[
  {
    "position": 0,
    "statements": [
      {
        "operand": {},
        "operator": "!",
        "position": 0,
        "type": 6,
      },
      {
        "names": [
          "swaying",
        ],
        "position": 1,
        "scope": "v",
        "type": 7,
      },
      {
        "left": {},
        "operator": "&&",
        "position": 11,
        "right": {},
        "type": 2,
      },
      {
        "arguments": [],
        "names": [
          "all_animations_finished",
        ],
        "namespace": "q",
        "position": 14,
        "type": 4,
      },
    ],
    "type": 4,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 14. 1.5 - math.pow(1.5, 1.0 - 015.0 * query.modified_move_speed) * query.camera_rotation(0) 1`] = `
[
  {
    "position": 0,
    "statements": [
      {
        "position": 0,
        "type": 1,
        "value": "1.5",
      },
      {
        "left": {},
        "operator": "-",
        "position": 4,
        "right": {},
        "type": 2,
      },
      {
        "arguments": [
          {
            "position": 15,
            "type": 1,
            "value": "1.5",
          },
          {
            "position": 20,
            "statements": [
              {
                "position": 20,
                "type": 1,
                "value": "1.0",
              },
              {
                "left": {},
                "operator": "-",
                "position": 24,
                "right": {},
                "type": 2,
              },
              {
                "position": 26,
                "type": 1,
                "value": "015.0",
              },
              {
                "left": {},
                "operator": "*",
                "position": 32,
                "right": {},
                "type": 2,
              },
              {
                "arguments": [],
                "names": [
                  "modified_move_speed",
                ],
                "namespace": "query",
                "position": 34,
                "type": 4,
              },
            ],
            "type": 4,
          },
        ],
        "names": [
          "pow",
        ],
        "namespace": "math",
        "position": 6,
        "type": 4,
      },
      {
        "left": {},
        "operator": "*",
        "position": 61,
        "right": {},
        "type": 2,
      },
      {
        "arguments": [
          {
            "position": 85,
            "type": 1,
            "value": "0",
          },
        ],
        "names": [
          "camera_rotation",
        ],
        "namespace": "query",
        "position": 63,
        "type": 4,
      },
    ],
    "type": 4,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 16. -175 * math.sin(variable.attack_time * 180) 1`] = `
[
  {
    "position": 0,
    "statements": [
      {
        "left": {},
        "operator": "-",
        "position": 0,
        "right": {},
        "type": 2,
      },
      {
        "position": 1,
        "type": 1,
        "value": "175",
      },
      {
        "left": {},
        "operator": "*",
        "position": 5,
        "right": {},
        "type": 2,
      },
      {
        "arguments": [
          {
            "position": 16,
            "statements": [
              {
                "names": [
                  "attack_time",
                ],
                "position": 16,
                "scope": "variable",
                "type": 7,
              },
              {
                "left": {},
                "operator": "*",
                "position": 37,
                "right": {},
                "type": 2,
              },
              {
                "position": 39,
                "type": 1,
                "value": "180",
              },
            ],
            "type": 4,
          },
        ],
        "names": [
          "sin",
        ],
        "namespace": "math",
        "position": 7,
        "type": 4,
      },
    ],
    "type": 4,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 20. !variable.has_trim 1`] = `
[
  {
    "position": 0,
    "statements": [
      {
        "operand": {},
        "operator": "!",
        "position": 0,
        "type": 6,
      },
      {
        "names": [
          "has_trim",
        ],
        "position": 1,
        "scope": "variable",
        "type": 7,
      },
    ],
    "type": 4,
  },
]
`;
