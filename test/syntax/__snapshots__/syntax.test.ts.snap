// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`molang - syntax should be able to parse and match the syntax tree generated 0. variable.agent.anim_state == 2 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 1. variable.agent.anim_state > 2 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 2. variable.agent.anim_state < 2 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 3. variable.agent.anim_state != 2 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 4. variable.agent.anim_state >= 2 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 5. variable.agent.anim_state <= 2 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 6. !variable.swaying && query.all_animations_finished 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 7. v.agent.anim_state == 2 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 8. v.agent.anim_state > 2 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 9. v.agent.anim_state < 2 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 10. v.agent.anim_state != 2 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 11. v.agent.anim_state >= 2 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 12. v.agent.anim_state <= 2 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 13. !v.swaying && q.all_animations_finished 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 14. 1.5 - math.pow(1.5, 1.0 - 015.0 * query.modified_move_speed) * query.camera_rotation(0) 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 15. math.clamp(math.sqrt(math.pow(query.position_delta(0), 2.0) + math.pow(query.position_delta(2), 2.0)), 0.0, 0.1) 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 16. -175 * math.sin(variable.attack_time * 180) 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 17. -5.0 * Math.cos(297.9380535 * query.anim_time) - 5.0 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 18. variable.is_enchanted ? Material.enchanted : Material.default 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 19. variable.has_trim ? variable.trim_path : Texture.default 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 20. !variable.has_trim 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 21. array.skins[query.property('minecraft:has_nectar') + query.is_angry * 2] 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 22. variable.x_head_rotation = math.clamp(query.target_x_rotation, -32.5, 32.5); 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 23. variable.y_head_rotation = math.clamp(query.target_y_rotation, -22.5, 25); 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 24. variable.is_rolled_up = query.property('minecraft:armadillo_state') != 'unrolled'; 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 25. variable.rolled_up_time = variable.is_rolled_up ? ((variable.rolled_up_time ?? 0.0) + query.delta_time) : 0.0; 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 26. variable.is_peeking = query.property('minecraft:armadillo_state') == 'rolled_up_peeking'; 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 27. variable.is_unrolling = query.property('minecraft:armadillo_state') == 'rolled_up_unrolling'; 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 28. variable.unrolling_time = variable.is_unrolling ? ((variable.unrolling_time ?? 0.0) + query.delta_time) : 0.0; 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 29. variable.use_rolled_up_model = variable.rolled_up_time >= 0.2083 && (variable.unrolling_time == 0.0 || variable.unrolling_time <= 1.25 ); 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 30. variable.walking = query.modified_move_speed > 0.01 && !variable.is_rolled_up; 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 31. variable.walk_anim_time_update = query.anim_time + math.min(3.0, math.lerp(2.0, 5.0, query.modified_move_speed)) * query.delta_time; 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 32. variable.walk_anim_time_update = query.anim_time + math.min(3.0, math.lerp(2.0, 5.0, query.modified_move_speed)) * query.delta_time;variable.y_head_rotation = math.clamp(query.target_y_rotation, -22.5, 25); 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
  {
    "position": 132,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 33. variable.x_head_rotation = math.clamp(query.target_x_rotation, -32.5, 32.5); 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 34. variable.y_head_rotation = math.clamp(query.target_y_rotation, -22.5, 25); 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 35. variable.is_rolled_up = q.property('minecraft:armadillo_state') != 'unrolled'; 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 36. variable.rolled_up_time = variable.is_rolled_up ? ((variable.rolled_up_time ?? 0.0) + q.delta_time) : 0.0; 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 37. variable.is_peeking = q.property('minecraft:armadillo_state') == 'rolled_up_peeking'; 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 38. variable.is_unrolling = q.property('minecraft:armadillo_state') == 'rolled_up_unrolling'; 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 39. variable.unrolling_time = variable.is_unrolling ? ((variable.unrolling_time ?? 0.0) + q.delta_time) : 0.0; 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 40. variable.use_rolled_up_model = variable.rolled_up_time >= 0.2083 && (variable.unrolling_time == 0.0 || variable.unrolling_time <= 1.25 ); 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 41. variable.walking = q.modified_move_speed > 0.01 && !variable.is_rolled_up; 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 42. variable.walk_anim_time_update = q.anim_time + math.min(3.0, math.lerp(2.0, 5.0, q.modified_move_speed)) * q.delta_time; 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 43. variable.walk_anim_time_update = q.anim_time + math.min(3.0, math.lerp(2.0, 5.0, q.modified_move_speed)) * q.delta_time;variable.y_head_rotation = math.clamp(q.target_y_rotation, -22.5, 25); 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
  {
    "position": 120,
    "statements": [],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 44. variable.state = variable.is_rolled_up ? variable.rolled_up_time >= 0.2083 ? 1 : 2 : 3; 1`] = `
[
  {
    "position": 0,
    "statements": [],
    "type": 9,
  },
]
`;
