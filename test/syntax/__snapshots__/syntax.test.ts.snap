// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`molang - syntax should be able to parse and match the syntax tree generated 0. variable.agent.anim_state == 2 1`] = `
[
  {
    "left": {
      "names": [
        "agent",
        "anim_state",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
    "operator": "==",
    "position": 26,
    "right": {
      "position": 29,
      "type": 5,
      "value": "2",
    },
    "type": 2,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 1. variable.agent.anim_state > 2 1`] = `
[
  {
    "left": {
      "names": [
        "agent",
        "anim_state",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
    "operator": ">",
    "position": 26,
    "right": {
      "position": 28,
      "type": 5,
      "value": "2",
    },
    "type": 2,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 2. variable.agent.anim_state < 2 1`] = `
[
  {
    "left": {
      "names": [
        "agent",
        "anim_state",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
    "operator": "<",
    "position": 26,
    "right": {
      "position": 28,
      "type": 5,
      "value": "2",
    },
    "type": 2,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 3. variable.agent.anim_state != 2 1`] = `
[
  {
    "left": {
      "names": [
        "agent",
        "anim_state",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
    "operator": "!=",
    "position": 26,
    "right": {
      "position": 29,
      "type": 5,
      "value": "2",
    },
    "type": 2,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 4. variable.agent.anim_state >= 2 1`] = `
[
  {
    "left": {
      "names": [
        "agent",
        "anim_state",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
    "operator": ">=",
    "position": 26,
    "right": {
      "position": 29,
      "type": 5,
      "value": "2",
    },
    "type": 2,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 5. variable.agent.anim_state <= 2 1`] = `
[
  {
    "left": {
      "names": [
        "agent",
        "anim_state",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
    "operator": "<=",
    "position": 26,
    "right": {
      "position": 29,
      "type": 5,
      "value": "2",
    },
    "type": 2,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 6. !variable.swaying && query.all_animations_finished 1`] = `
[
  {
    "left": {
      "operand": {
        "names": [
          "swaying",
        ],
        "position": 1,
        "scope": "variable",
        "type": 12,
      },
      "operator": "!",
      "position": 0,
      "type": 11,
    },
    "operator": "&&",
    "position": 18,
    "right": {
      "arguments": [],
      "names": [
        "all_animations_finished",
      ],
      "namespace": "query",
      "position": 21,
      "type": 4,
    },
    "type": 2,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 7. v.agent.anim_state == 2 1`] = `
[
  {
    "left": {
      "names": [
        "agent",
        "anim_state",
      ],
      "position": 0,
      "scope": "v",
      "type": 12,
    },
    "operator": "==",
    "position": 19,
    "right": {
      "position": 22,
      "type": 5,
      "value": "2",
    },
    "type": 2,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 8. v.agent.anim_state > 2 1`] = `
[
  {
    "left": {
      "names": [
        "agent",
        "anim_state",
      ],
      "position": 0,
      "scope": "v",
      "type": 12,
    },
    "operator": ">",
    "position": 19,
    "right": {
      "position": 21,
      "type": 5,
      "value": "2",
    },
    "type": 2,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 9. v.agent.anim_state < 2 1`] = `
[
  {
    "left": {
      "names": [
        "agent",
        "anim_state",
      ],
      "position": 0,
      "scope": "v",
      "type": 12,
    },
    "operator": "<",
    "position": 19,
    "right": {
      "position": 21,
      "type": 5,
      "value": "2",
    },
    "type": 2,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 10. v.agent.anim_state != 2 1`] = `
[
  {
    "left": {
      "names": [
        "agent",
        "anim_state",
      ],
      "position": 0,
      "scope": "v",
      "type": 12,
    },
    "operator": "!=",
    "position": 19,
    "right": {
      "position": 22,
      "type": 5,
      "value": "2",
    },
    "type": 2,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 11. v.agent.anim_state >= 2 1`] = `
[
  {
    "left": {
      "names": [
        "agent",
        "anim_state",
      ],
      "position": 0,
      "scope": "v",
      "type": 12,
    },
    "operator": ">=",
    "position": 19,
    "right": {
      "position": 22,
      "type": 5,
      "value": "2",
    },
    "type": 2,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 12. v.agent.anim_state <= 2 1`] = `
[
  {
    "left": {
      "names": [
        "agent",
        "anim_state",
      ],
      "position": 0,
      "scope": "v",
      "type": 12,
    },
    "operator": "<=",
    "position": 19,
    "right": {
      "position": 22,
      "type": 5,
      "value": "2",
    },
    "type": 2,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 13. !v.swaying && q.all_animations_finished 1`] = `
[
  {
    "left": {
      "operand": {
        "names": [
          "swaying",
        ],
        "position": 1,
        "scope": "v",
        "type": 12,
      },
      "operator": "!",
      "position": 0,
      "type": 11,
    },
    "operator": "&&",
    "position": 11,
    "right": {
      "arguments": [],
      "names": [
        "all_animations_finished",
      ],
      "namespace": "q",
      "position": 14,
      "type": 4,
    },
    "type": 2,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 14. 1.5 - math.pow(1.5, 1.0 - 015.0 * query.modified_move_speed) * query.camera_rotation(0) 1`] = `
[
  {
    "left": {
      "left": {
        "position": 0,
        "type": 5,
        "value": "1.5",
      },
      "operator": "-",
      "position": 4,
      "right": {
        "arguments": [
          {
            "position": 15,
            "type": 5,
            "value": "1.5",
          },
          {
            "left": {
              "left": {
                "position": 20,
                "type": 5,
                "value": "1.0",
              },
              "operator": "-",
              "position": 24,
              "right": {
                "position": 26,
                "type": 5,
                "value": "015.0",
              },
              "type": 2,
            },
            "operator": "*",
            "position": 32,
            "right": {
              "arguments": [],
              "names": [
                "modified_move_speed",
              ],
              "namespace": "query",
              "position": 34,
              "type": 4,
            },
            "type": 2,
          },
        ],
        "names": [
          "pow",
        ],
        "namespace": "math",
        "position": 6,
        "type": 4,
      },
      "type": 2,
    },
    "operator": "*",
    "position": 61,
    "right": {
      "arguments": [
        {
          "position": 85,
          "type": 5,
          "value": "0",
        },
      ],
      "names": [
        "camera_rotation",
      ],
      "namespace": "query",
      "position": 63,
      "type": 4,
    },
    "type": 2,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 15. math.clamp(math.sqrt(math.pow(query.position_delta(0), 2.0) + math.pow(query.position_delta(2), 2.0)), 0.0, 0.1) 1`] = `
[
  {
    "arguments": [
      {
        "arguments": [
          {
            "left": {
              "arguments": [
                {
                  "arguments": [
                    {
                      "position": 51,
                      "type": 5,
                      "value": "0",
                    },
                  ],
                  "names": [
                    "position_delta",
                  ],
                  "namespace": "query",
                  "position": 30,
                  "type": 4,
                },
                {
                  "position": 55,
                  "type": 5,
                  "value": "2.0",
                },
              ],
              "names": [
                "pow",
              ],
              "namespace": "math",
              "position": 21,
              "type": 4,
            },
            "operator": "+",
            "position": 60,
            "right": {
              "arguments": [
                {
                  "arguments": [
                    {
                      "position": 92,
                      "type": 5,
                      "value": "2",
                    },
                  ],
                  "names": [
                    "position_delta",
                  ],
                  "namespace": "query",
                  "position": 71,
                  "type": 4,
                },
                {
                  "position": 96,
                  "type": 5,
                  "value": "2.0",
                },
              ],
              "names": [
                "pow",
              ],
              "namespace": "math",
              "position": 62,
              "type": 4,
            },
            "type": 2,
          },
        ],
        "names": [
          "sqrt",
        ],
        "namespace": "math",
        "position": 11,
        "type": 4,
      },
      {
        "position": 103,
        "type": 5,
        "value": "0.0",
      },
      {
        "position": 108,
        "type": 5,
        "value": "0.1",
      },
    ],
    "names": [
      "clamp",
    ],
    "namespace": "math",
    "position": 0,
    "type": 4,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 16. -175 * math.sin(variable.attack_time * 180) 1`] = `
[
  {
    "left": {
      "operand": {
        "position": 1,
        "type": 5,
        "value": "175",
      },
      "operator": "-",
      "position": 0,
      "type": 11,
    },
    "operator": "*",
    "position": 5,
    "right": {
      "arguments": [
        {
          "left": {
            "names": [
              "attack_time",
            ],
            "position": 16,
            "scope": "variable",
            "type": 12,
          },
          "operator": "*",
          "position": 37,
          "right": {
            "position": 39,
            "type": 5,
            "value": "180",
          },
          "type": 2,
        },
      ],
      "names": [
        "sin",
      ],
      "namespace": "math",
      "position": 7,
      "type": 4,
    },
    "type": 2,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 17. math.sin(variable.attack_time * 180) * -175 1`] = `
[
  {
    "left": {
      "arguments": [
        {
          "left": {
            "names": [
              "attack_time",
            ],
            "position": 9,
            "scope": "variable",
            "type": 12,
          },
          "operator": "*",
          "position": 30,
          "right": {
            "position": 32,
            "type": 5,
            "value": "180",
          },
          "type": 2,
        },
      ],
      "names": [
        "sin",
      ],
      "namespace": "math",
      "position": 0,
      "type": 4,
    },
    "operator": "*",
    "position": 37,
    "right": {
      "operand": {
        "position": 40,
        "type": 5,
        "value": "175",
      },
      "operator": "-",
      "position": 39,
      "type": 11,
    },
    "type": 2,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 18. -5.0 * Math.cos(297.9380535 * query.anim_time) - 5.0 1`] = `
[
  {
    "left": {
      "operand": {
        "position": 1,
        "type": 5,
        "value": "5.0",
      },
      "operator": "-",
      "position": 0,
      "type": 11,
    },
    "operator": "*",
    "position": 5,
    "right": {
      "left": {
        "arguments": [
          {
            "left": {
              "position": 16,
              "type": 5,
              "value": "297.9380535",
            },
            "operator": "*",
            "position": 28,
            "right": {
              "arguments": [],
              "names": [
                "anim_time",
              ],
              "namespace": "query",
              "position": 30,
              "type": 4,
            },
            "type": 2,
          },
        ],
        "names": [
          "cos",
        ],
        "namespace": "math",
        "position": 7,
        "type": 4,
      },
      "operator": "-",
      "position": 47,
      "right": {
        "position": 49,
        "type": 5,
        "value": "5.0",
      },
      "type": 2,
    },
    "type": 2,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 19. variable.is_enchanted ? Material.enchanted : Material.default 1`] = `
[
  {
    "position": 0,
    "statements": [
      {
        "condition": {
          "names": [
            "is_enchanted",
          ],
          "position": 0,
          "scope": "variable",
          "type": 12,
        },
        "falseExpression": {
          "names": [
            "default",
          ],
          "namespace": "material",
          "position": 45,
          "type": 8,
        },
        "position": 22,
        "trueExpression": {
          "names": [
            "enchanted",
          ],
          "namespace": "material",
          "position": 24,
          "type": 8,
        },
        "type": 3,
      },
      {
        "names": [
          "default",
        ],
        "namespace": "material",
        "position": 45,
        "type": 8,
      },
    ],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 20. variable.has_trim ? variable.trim_path : Texture.default 1`] = `
[
  {
    "position": 0,
    "statements": [
      {
        "condition": {
          "names": [
            "has_trim",
          ],
          "position": 0,
          "scope": "variable",
          "type": 12,
        },
        "falseExpression": {
          "names": [
            "default",
          ],
          "namespace": "texture",
          "position": 41,
          "type": 8,
        },
        "position": 18,
        "trueExpression": {
          "names": [
            "trim_path",
          ],
          "position": 20,
          "scope": "variable",
          "type": 12,
        },
        "type": 3,
      },
      {
        "names": [
          "default",
        ],
        "namespace": "texture",
        "position": 41,
        "type": 8,
      },
    ],
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 21. !variable.has_trim 1`] = `
[
  {
    "operand": {
      "names": [
        "has_trim",
      ],
      "position": 1,
      "scope": "variable",
      "type": 12,
    },
    "operator": "!",
    "position": 0,
    "type": 11,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 22. array.skins[query.property('minecraft:has_nectar') + query.is_angry * 2] 1`] = `
[
  {
    "array": {
      "names": [
        "skins",
      ],
      "position": 0,
      "scope": "array",
      "type": 12,
    },
    "index": {
      "left": {
        "left": {
          "arguments": [
            {
              "position": 27,
              "type": 10,
              "value": "minecraft:has_nectar",
            },
          ],
          "names": [
            "property",
          ],
          "namespace": "query",
          "position": 12,
          "type": 4,
        },
        "operator": "+",
        "position": 51,
        "right": {
          "arguments": [],
          "names": [
            "is_angry",
          ],
          "namespace": "query",
          "position": 53,
          "type": 4,
        },
        "type": 2,
      },
      "operator": "*",
      "position": 68,
      "right": {
        "position": 70,
        "type": 5,
        "value": "2",
      },
      "type": 2,
    },
    "position": 0,
    "type": 0,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 23. variable.x_head_rotation = query.target_x_rotation * 32.5; 1`] = `
[
  {
    "left": {
      "names": [
        "x_head_rotation",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
    "position": 25,
    "right": {
      "left": {
        "arguments": [],
        "names": [
          "target_x_rotation",
        ],
        "namespace": "query",
        "position": 27,
        "type": 4,
      },
      "operator": "*",
      "position": 51,
      "right": {
        "position": 53,
        "type": 5,
        "value": "32.5",
      },
      "type": 2,
    },
    "type": 1,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 24. variable.x_head_rotation = math.clamp(query.target_x_rotation, -32.5, 32.5); 1`] = `
[
  {
    "left": {
      "names": [
        "x_head_rotation",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
    "position": 25,
    "right": {
      "arguments": [
        {
          "arguments": [],
          "names": [
            "target_x_rotation",
          ],
          "namespace": "query",
          "position": 38,
          "type": 4,
        },
        {
          "operand": {
            "position": 64,
            "type": 5,
            "value": "32.5",
          },
          "operator": "-",
          "position": 63,
          "type": 11,
        },
        {
          "position": 70,
          "type": 5,
          "value": "32.5",
        },
      ],
      "names": [
        "clamp",
      ],
      "namespace": "math",
      "position": 27,
      "type": 4,
    },
    "type": 1,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 25. variable.y_head_rotation = math.clamp(query.target_y_rotation, -22.5, 25); 1`] = `
[
  {
    "left": {
      "names": [
        "y_head_rotation",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
    "position": 25,
    "right": {
      "arguments": [
        {
          "arguments": [],
          "names": [
            "target_y_rotation",
          ],
          "namespace": "query",
          "position": 38,
          "type": 4,
        },
        {
          "operand": {
            "position": 64,
            "type": 5,
            "value": "22.5",
          },
          "operator": "-",
          "position": 63,
          "type": 11,
        },
        {
          "position": 70,
          "type": 5,
          "value": "25",
        },
      ],
      "names": [
        "clamp",
      ],
      "namespace": "math",
      "position": 27,
      "type": 4,
    },
    "type": 1,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 26. variable.is_rolled_up = query.property('minecraft:armadillo_state') != 'unrolled'; 1`] = `
[
  {
    "left": {
      "names": [
        "is_rolled_up",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
    "position": 22,
    "right": {
      "left": {
        "arguments": [
          {
            "position": 39,
            "type": 10,
            "value": "minecraft:armadillo_state",
          },
        ],
        "names": [
          "property",
        ],
        "namespace": "query",
        "position": 24,
        "type": 4,
      },
      "operator": "!=",
      "position": 68,
      "right": {
        "position": 71,
        "type": 10,
        "value": "unrolled",
      },
      "type": 2,
    },
    "type": 1,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 28. variable.is_peeking = query.property('minecraft:armadillo_state') == 'rolled_up_peeking'; 1`] = `
[
  {
    "left": {
      "names": [
        "is_peeking",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
    "position": 20,
    "right": {
      "left": {
        "arguments": [
          {
            "position": 37,
            "type": 10,
            "value": "minecraft:armadillo_state",
          },
        ],
        "names": [
          "property",
        ],
        "namespace": "query",
        "position": 22,
        "type": 4,
      },
      "operator": "==",
      "position": 66,
      "right": {
        "position": 69,
        "type": 10,
        "value": "rolled_up_peeking",
      },
      "type": 2,
    },
    "type": 1,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 29. variable.is_unrolling = query.property('minecraft:armadillo_state') == 'rolled_up_unrolling'; 1`] = `
[
  {
    "left": {
      "names": [
        "is_unrolling",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
    "position": 22,
    "right": {
      "left": {
        "arguments": [
          {
            "position": 39,
            "type": 10,
            "value": "minecraft:armadillo_state",
          },
        ],
        "names": [
          "property",
        ],
        "namespace": "query",
        "position": 24,
        "type": 4,
      },
      "operator": "==",
      "position": 68,
      "right": {
        "position": 71,
        "type": 10,
        "value": "rolled_up_unrolling",
      },
      "type": 2,
    },
    "type": 1,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 32. variable.walking = query.modified_move_speed > 0.01 && !variable.is_rolled_up; 1`] = `
[
  {
    "left": {
      "names": [
        "walking",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
    "position": 17,
    "right": {
      "left": {
        "arguments": [],
        "names": [
          "modified_move_speed",
        ],
        "namespace": "query",
        "position": 19,
        "type": 4,
      },
      "operator": ">",
      "position": 45,
      "right": {
        "left": {
          "position": 47,
          "type": 5,
          "value": "0.01",
        },
        "operator": "&&",
        "position": 52,
        "right": {
          "operand": {
            "names": [
              "is_rolled_up",
            ],
            "position": 56,
            "scope": "variable",
            "type": 12,
          },
          "operator": "!",
          "position": 55,
          "type": 11,
        },
        "type": 2,
      },
      "type": 2,
    },
    "type": 1,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 33. variable.walk_anim_time_update = query.anim_time + math.min(3.0, math.lerp(2.0, 5.0, query.modified_move_speed)) * query.delta_time; 1`] = `
[
  {
    "left": {
      "names": [
        "walk_anim_time_update",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
    "position": 31,
    "right": {
      "left": {
        "left": {
          "arguments": [],
          "names": [
            "anim_time",
          ],
          "namespace": "query",
          "position": 33,
          "type": 4,
        },
        "operator": "+",
        "position": 49,
        "right": {
          "arguments": [
            {
              "position": 60,
              "type": 5,
              "value": "3.0",
            },
            {
              "arguments": [
                {
                  "position": 75,
                  "type": 5,
                  "value": "2.0",
                },
                {
                  "position": 80,
                  "type": 5,
                  "value": "5.0",
                },
                {
                  "arguments": [],
                  "names": [
                    "modified_move_speed",
                  ],
                  "namespace": "query",
                  "position": 85,
                  "type": 4,
                },
              ],
              "names": [
                "lerp",
              ],
              "namespace": "math",
              "position": 65,
              "type": 4,
            },
          ],
          "names": [
            "min",
          ],
          "namespace": "math",
          "position": 51,
          "type": 4,
        },
        "type": 2,
      },
      "operator": "*",
      "position": 113,
      "right": {
        "arguments": [],
        "names": [
          "delta_time",
        ],
        "namespace": "query",
        "position": 115,
        "type": 4,
      },
      "type": 2,
    },
    "type": 1,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 34. variable.walk_anim_time_update = query.anim_time + math.min(3.0, math.lerp(2.0, 5.0, query.modified_move_speed)) * query.delta_time;variable.y_head_rotation = math.clamp(query.target_y_rotation, -22.5, 25); 1`] = `
[
  {
    "left": {
      "names": [
        "walk_anim_time_update",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
    "position": 31,
    "right": {
      "left": {
        "left": {
          "arguments": [],
          "names": [
            "anim_time",
          ],
          "namespace": "query",
          "position": 33,
          "type": 4,
        },
        "operator": "+",
        "position": 49,
        "right": {
          "arguments": [
            {
              "position": 60,
              "type": 5,
              "value": "3.0",
            },
            {
              "arguments": [
                {
                  "position": 75,
                  "type": 5,
                  "value": "2.0",
                },
                {
                  "position": 80,
                  "type": 5,
                  "value": "5.0",
                },
                {
                  "arguments": [],
                  "names": [
                    "modified_move_speed",
                  ],
                  "namespace": "query",
                  "position": 85,
                  "type": 4,
                },
              ],
              "names": [
                "lerp",
              ],
              "namespace": "math",
              "position": 65,
              "type": 4,
            },
          ],
          "names": [
            "min",
          ],
          "namespace": "math",
          "position": 51,
          "type": 4,
        },
        "type": 2,
      },
      "operator": "*",
      "position": 113,
      "right": {
        "arguments": [],
        "names": [
          "delta_time",
        ],
        "namespace": "query",
        "position": 115,
        "type": 4,
      },
      "type": 2,
    },
    "type": 1,
  },
  {
    "left": {
      "names": [
        "y_head_rotation",
      ],
      "position": 132,
      "scope": "variable",
      "type": 12,
    },
    "position": 157,
    "right": {
      "arguments": [
        {
          "arguments": [],
          "names": [
            "target_y_rotation",
          ],
          "namespace": "query",
          "position": 170,
          "type": 4,
        },
        {
          "operand": {
            "position": 196,
            "type": 5,
            "value": "22.5",
          },
          "operator": "-",
          "position": 195,
          "type": 11,
        },
        {
          "position": 202,
          "type": 5,
          "value": "25",
        },
      ],
      "names": [
        "clamp",
      ],
      "namespace": "math",
      "position": 159,
      "type": 4,
    },
    "type": 1,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 35. variable.x_head_rotation = math.clamp(query.target_x_rotation, -32.5, 32.5); 1`] = `
[
  {
    "left": {
      "names": [
        "x_head_rotation",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
    "position": 25,
    "right": {
      "arguments": [
        {
          "arguments": [],
          "names": [
            "target_x_rotation",
          ],
          "namespace": "query",
          "position": 38,
          "type": 4,
        },
        {
          "operand": {
            "position": 64,
            "type": 5,
            "value": "32.5",
          },
          "operator": "-",
          "position": 63,
          "type": 11,
        },
        {
          "position": 70,
          "type": 5,
          "value": "32.5",
        },
      ],
      "names": [
        "clamp",
      ],
      "namespace": "math",
      "position": 27,
      "type": 4,
    },
    "type": 1,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 36. variable.y_head_rotation = math.clamp(query.target_y_rotation, -22.5, 25); 1`] = `
[
  {
    "left": {
      "names": [
        "y_head_rotation",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
    "position": 25,
    "right": {
      "arguments": [
        {
          "arguments": [],
          "names": [
            "target_y_rotation",
          ],
          "namespace": "query",
          "position": 38,
          "type": 4,
        },
        {
          "operand": {
            "position": 64,
            "type": 5,
            "value": "22.5",
          },
          "operator": "-",
          "position": 63,
          "type": 11,
        },
        {
          "position": 70,
          "type": 5,
          "value": "25",
        },
      ],
      "names": [
        "clamp",
      ],
      "namespace": "math",
      "position": 27,
      "type": 4,
    },
    "type": 1,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 37. variable.is_rolled_up = q.property('minecraft:armadillo_state') != 'unrolled'; 1`] = `
[
  {
    "left": {
      "names": [
        "is_rolled_up",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
    "position": 22,
    "right": {
      "left": {
        "arguments": [
          {
            "position": 35,
            "type": 10,
            "value": "minecraft:armadillo_state",
          },
        ],
        "names": [
          "property",
        ],
        "namespace": "q",
        "position": 24,
        "type": 4,
      },
      "operator": "!=",
      "position": 64,
      "right": {
        "position": 67,
        "type": 10,
        "value": "unrolled",
      },
      "type": 2,
    },
    "type": 1,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 39. variable.is_peeking = q.property('minecraft:armadillo_state') == 'rolled_up_peeking'; 1`] = `
[
  {
    "left": {
      "names": [
        "is_peeking",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
    "position": 20,
    "right": {
      "left": {
        "arguments": [
          {
            "position": 33,
            "type": 10,
            "value": "minecraft:armadillo_state",
          },
        ],
        "names": [
          "property",
        ],
        "namespace": "q",
        "position": 22,
        "type": 4,
      },
      "operator": "==",
      "position": 62,
      "right": {
        "position": 65,
        "type": 10,
        "value": "rolled_up_peeking",
      },
      "type": 2,
    },
    "type": 1,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 40. variable.is_unrolling = q.property('minecraft:armadillo_state') == 'rolled_up_unrolling'; 1`] = `
[
  {
    "left": {
      "names": [
        "is_unrolling",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
    "position": 22,
    "right": {
      "left": {
        "arguments": [
          {
            "position": 35,
            "type": 10,
            "value": "minecraft:armadillo_state",
          },
        ],
        "names": [
          "property",
        ],
        "namespace": "q",
        "position": 24,
        "type": 4,
      },
      "operator": "==",
      "position": 64,
      "right": {
        "position": 67,
        "type": 10,
        "value": "rolled_up_unrolling",
      },
      "type": 2,
    },
    "type": 1,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 43. variable.walking = q.modified_move_speed > 0.01 && !variable.is_rolled_up; 1`] = `
[
  {
    "left": {
      "names": [
        "walking",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
    "position": 17,
    "right": {
      "left": {
        "arguments": [],
        "names": [
          "modified_move_speed",
        ],
        "namespace": "q",
        "position": 19,
        "type": 4,
      },
      "operator": ">",
      "position": 41,
      "right": {
        "left": {
          "position": 43,
          "type": 5,
          "value": "0.01",
        },
        "operator": "&&",
        "position": 48,
        "right": {
          "operand": {
            "names": [
              "is_rolled_up",
            ],
            "position": 52,
            "scope": "variable",
            "type": 12,
          },
          "operator": "!",
          "position": 51,
          "type": 11,
        },
        "type": 2,
      },
      "type": 2,
    },
    "type": 1,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 44. variable.walk_anim_time_update = q.anim_time + math.min(3.0, math.lerp(2.0, 5.0, q.modified_move_speed)) * q.delta_time; 1`] = `
[
  {
    "left": {
      "names": [
        "walk_anim_time_update",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
    "position": 31,
    "right": {
      "left": {
        "left": {
          "arguments": [],
          "names": [
            "anim_time",
          ],
          "namespace": "q",
          "position": 33,
          "type": 4,
        },
        "operator": "+",
        "position": 45,
        "right": {
          "arguments": [
            {
              "position": 56,
              "type": 5,
              "value": "3.0",
            },
            {
              "arguments": [
                {
                  "position": 71,
                  "type": 5,
                  "value": "2.0",
                },
                {
                  "position": 76,
                  "type": 5,
                  "value": "5.0",
                },
                {
                  "arguments": [],
                  "names": [
                    "modified_move_speed",
                  ],
                  "namespace": "q",
                  "position": 81,
                  "type": 4,
                },
              ],
              "names": [
                "lerp",
              ],
              "namespace": "math",
              "position": 61,
              "type": 4,
            },
          ],
          "names": [
            "min",
          ],
          "namespace": "math",
          "position": 47,
          "type": 4,
        },
        "type": 2,
      },
      "operator": "*",
      "position": 105,
      "right": {
        "arguments": [],
        "names": [
          "delta_time",
        ],
        "namespace": "q",
        "position": 107,
        "type": 4,
      },
      "type": 2,
    },
    "type": 1,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 45. variable.walk_anim_time_update = q.anim_time + math.min(3.0, math.lerp(2.0, 5.0, q.modified_move_speed)) * q.delta_time;variable.y_head_rotation = math.clamp(q.target_y_rotation, -22.5, 25); 1`] = `
[
  {
    "left": {
      "names": [
        "walk_anim_time_update",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
    "position": 31,
    "right": {
      "left": {
        "left": {
          "arguments": [],
          "names": [
            "anim_time",
          ],
          "namespace": "q",
          "position": 33,
          "type": 4,
        },
        "operator": "+",
        "position": 45,
        "right": {
          "arguments": [
            {
              "position": 56,
              "type": 5,
              "value": "3.0",
            },
            {
              "arguments": [
                {
                  "position": 71,
                  "type": 5,
                  "value": "2.0",
                },
                {
                  "position": 76,
                  "type": 5,
                  "value": "5.0",
                },
                {
                  "arguments": [],
                  "names": [
                    "modified_move_speed",
                  ],
                  "namespace": "q",
                  "position": 81,
                  "type": 4,
                },
              ],
              "names": [
                "lerp",
              ],
              "namespace": "math",
              "position": 61,
              "type": 4,
            },
          ],
          "names": [
            "min",
          ],
          "namespace": "math",
          "position": 47,
          "type": 4,
        },
        "type": 2,
      },
      "operator": "*",
      "position": 105,
      "right": {
        "arguments": [],
        "names": [
          "delta_time",
        ],
        "namespace": "q",
        "position": 107,
        "type": 4,
      },
      "type": 2,
    },
    "type": 1,
  },
  {
    "left": {
      "names": [
        "y_head_rotation",
      ],
      "position": 120,
      "scope": "variable",
      "type": 12,
    },
    "position": 145,
    "right": {
      "arguments": [
        {
          "arguments": [],
          "names": [
            "target_y_rotation",
          ],
          "namespace": "q",
          "position": 158,
          "type": 4,
        },
        {
          "operand": {
            "position": 180,
            "type": 5,
            "value": "22.5",
          },
          "operator": "-",
          "position": 179,
          "type": 11,
        },
        {
          "position": 186,
          "type": 5,
          "value": "25",
        },
      ],
      "names": [
        "clamp",
      ],
      "namespace": "math",
      "position": 147,
      "type": 4,
    },
    "type": 1,
  },
]
`;
