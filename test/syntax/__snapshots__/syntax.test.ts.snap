// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`molang - syntax should be able to parse and match the syntax tree generated 0. variable.agent.anim_state == 2 1`] = `
[
  {
    "offset": 0,
    "text": "variable",
    "type": 5,
  },
  {
    "offset": 8,
    "text": ".",
    "type": 1,
  },
  {
    "offset": 9,
    "text": "agent",
    "type": 4,
  },
  {
    "offset": 14,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 15,
    "text": "anim_state ",
    "type": 0,
  },
  {
    "offset": 26,
    "text": "==",
    "type": 6,
  },
  {
    "offset": 28,
    "text": " 2",
    "type": 0,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 1. variable.agent.anim_state > 2 1`] = `
[
  {
    "offset": 0,
    "text": "variable",
    "type": 5,
  },
  {
    "offset": 8,
    "text": ".",
    "type": 1,
  },
  {
    "offset": 9,
    "text": "agent",
    "type": 4,
  },
  {
    "offset": 14,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 15,
    "text": "anim_state ",
    "type": 0,
  },
  {
    "offset": 26,
    "text": ">",
    "type": 6,
  },
  {
    "offset": 27,
    "text": " 2",
    "type": 0,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 2. variable.agent.anim_state < 2 1`] = `
[
  {
    "offset": 0,
    "text": "variable",
    "type": 5,
  },
  {
    "offset": 8,
    "text": ".",
    "type": 1,
  },
  {
    "offset": 9,
    "text": "agent",
    "type": 4,
  },
  {
    "offset": 14,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 15,
    "text": "anim_state ",
    "type": 0,
  },
  {
    "offset": 26,
    "text": "<",
    "type": 6,
  },
  {
    "offset": 27,
    "text": " 2",
    "type": 0,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 3. variable.agent.anim_state != 2 1`] = `
[
  {
    "offset": 0,
    "text": "variable",
    "type": 5,
  },
  {
    "offset": 8,
    "text": ".",
    "type": 1,
  },
  {
    "offset": 9,
    "text": "agent",
    "type": 4,
  },
  {
    "offset": 14,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 15,
    "text": "anim_state ",
    "type": 0,
  },
  {
    "offset": 26,
    "text": "!=",
    "type": 6,
  },
  {
    "offset": 28,
    "text": " 2",
    "type": 0,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 4. variable.agent.anim_state >= 2 1`] = `
[
  {
    "offset": 0,
    "text": "variable",
    "type": 5,
  },
  {
    "offset": 8,
    "text": ".",
    "type": 1,
  },
  {
    "offset": 9,
    "text": "agent",
    "type": 4,
  },
  {
    "offset": 14,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 15,
    "text": "anim_state ",
    "type": 0,
  },
  {
    "offset": 26,
    "text": ">=",
    "type": 6,
  },
  {
    "offset": 28,
    "text": " 2",
    "type": 0,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 5. variable.agent.anim_state <= 2 1`] = `
[
  {
    "offset": 0,
    "text": "variable",
    "type": 5,
  },
  {
    "offset": 8,
    "text": ".",
    "type": 1,
  },
  {
    "offset": 9,
    "text": "agent",
    "type": 4,
  },
  {
    "offset": 14,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 15,
    "text": "anim_state ",
    "type": 0,
  },
  {
    "offset": 26,
    "text": "<=",
    "type": 6,
  },
  {
    "offset": 28,
    "text": " 2",
    "type": 0,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 6. !variable.swaying && query.all_animations_finished 1`] = `
[
  {
    "offset": 0,
    "text": "",
    "type": 0,
  },
  {
    "offset": 0,
    "text": "!",
    "type": 6,
  },
  {
    "offset": 1,
    "text": "variable",
    "type": 5,
  },
  {
    "offset": 9,
    "text": ".",
    "type": 1,
  },
  {
    "offset": 10,
    "text": "swaying ",
    "type": 4,
  },
  {
    "offset": 18,
    "text": "&&",
    "type": 6,
  },
  {
    "offset": 20,
    "text": " query",
    "type": 0,
  },
  {
    "offset": 26,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 27,
    "text": "all_animations_finished",
    "type": 0,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 7. 1.5 - math.pow(1.5, 1.0 - 015.0 * query.modified_move_speed) * query.camera_rotation(0) 1`] = `
[
  {
    "offset": 0,
    "text": "1",
    "type": 8,
  },
  {
    "offset": 1,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 2,
    "text": "5 ",
    "type": 0,
  },
  {
    "offset": 4,
    "text": "-",
    "type": 6,
  },
  {
    "offset": 5,
    "text": " math",
    "type": 0,
  },
  {
    "offset": 10,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 11,
    "text": "pow",
    "type": 9,
  },
  {
    "offset": 14,
    "text": "(",
    "type": 0,
  },
  {
    "offset": 15,
    "text": "1",
    "type": 8,
  },
  {
    "offset": 16,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 17,
    "text": "5",
    "type": 8,
  },
  {
    "offset": 18,
    "text": ",",
    "type": 7,
  },
  {
    "offset": 19,
    "text": " 1",
    "type": 0,
  },
  {
    "offset": 21,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 22,
    "text": "0 ",
    "type": 0,
  },
  {
    "offset": 24,
    "text": "-",
    "type": 6,
  },
  {
    "offset": 25,
    "text": " 015",
    "type": 0,
  },
  {
    "offset": 29,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 30,
    "text": "0 ",
    "type": 0,
  },
  {
    "offset": 32,
    "text": "*",
    "type": 6,
  },
  {
    "offset": 33,
    "text": " query",
    "type": 0,
  },
  {
    "offset": 39,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 40,
    "text": "modified_move_speed",
    "type": 0,
  },
  {
    "offset": 59,
    "text": ")",
    "type": 0,
  },
  {
    "offset": 60,
    "text": " ",
    "type": 0,
  },
  {
    "offset": 61,
    "text": "*",
    "type": 6,
  },
  {
    "offset": 62,
    "text": " query",
    "type": 0,
  },
  {
    "offset": 68,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 69,
    "text": "camera_rotation",
    "type": 0,
  },
  {
    "offset": 84,
    "text": "(",
    "type": 0,
  },
  {
    "offset": 85,
    "text": "0",
    "type": 8,
  },
  {
    "offset": 86,
    "text": ")",
    "type": 0,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 8. math.clamp(math.sqrt(math.pow(query.position_delta(0), 2.0) + math.pow(query.position_delta(2), 2.0)), 0.0, 0.1) 1`] = `
[
  {
    "offset": 0,
    "text": "math",
    "type": 5,
  },
  {
    "offset": 4,
    "text": ".",
    "type": 1,
  },
  {
    "offset": 5,
    "text": "clamp",
    "type": 4,
  },
  {
    "offset": 10,
    "text": "(",
    "type": 0,
  },
  {
    "offset": 11,
    "text": "math",
    "type": 5,
  },
  {
    "offset": 15,
    "text": ".",
    "type": 1,
  },
  {
    "offset": 16,
    "text": "sqrt",
    "type": 4,
  },
  {
    "offset": 20,
    "text": "(",
    "type": 0,
  },
  {
    "offset": 21,
    "text": "math",
    "type": 5,
  },
  {
    "offset": 25,
    "text": ".",
    "type": 1,
  },
  {
    "offset": 26,
    "text": "pow",
    "type": 4,
  },
  {
    "offset": 29,
    "text": "(",
    "type": 0,
  },
  {
    "offset": 30,
    "text": "query",
    "type": 5,
  },
  {
    "offset": 35,
    "text": ".",
    "type": 1,
  },
  {
    "offset": 36,
    "text": "position_delta",
    "type": 4,
  },
  {
    "offset": 50,
    "text": "(",
    "type": 0,
  },
  {
    "offset": 51,
    "text": "0",
    "type": 8,
  },
  {
    "offset": 52,
    "text": ")",
    "type": 0,
  },
  {
    "offset": 53,
    "text": "",
    "type": 0,
  },
  {
    "offset": 53,
    "text": ",",
    "type": 7,
  },
  {
    "offset": 54,
    "text": " 2",
    "type": 0,
  },
  {
    "offset": 56,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 57,
    "text": "0",
    "type": 8,
  },
  {
    "offset": 58,
    "text": ")",
    "type": 0,
  },
  {
    "offset": 59,
    "text": " ",
    "type": 0,
  },
  {
    "offset": 60,
    "text": "+",
    "type": 6,
  },
  {
    "offset": 61,
    "text": " math",
    "type": 0,
  },
  {
    "offset": 66,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 67,
    "text": "pow",
    "type": 9,
  },
  {
    "offset": 70,
    "text": "(",
    "type": 0,
  },
  {
    "offset": 71,
    "text": "query",
    "type": 5,
  },
  {
    "offset": 76,
    "text": ".",
    "type": 1,
  },
  {
    "offset": 77,
    "text": "position_delta",
    "type": 4,
  },
  {
    "offset": 91,
    "text": "(",
    "type": 0,
  },
  {
    "offset": 92,
    "text": "2",
    "type": 8,
  },
  {
    "offset": 93,
    "text": ")",
    "type": 0,
  },
  {
    "offset": 94,
    "text": "",
    "type": 0,
  },
  {
    "offset": 94,
    "text": ",",
    "type": 7,
  },
  {
    "offset": 95,
    "text": " 2",
    "type": 0,
  },
  {
    "offset": 97,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 98,
    "text": "0",
    "type": 8,
  },
  {
    "offset": 99,
    "text": ")",
    "type": 0,
  },
  {
    "offset": 100,
    "text": "",
    "type": 0,
  },
  {
    "offset": 100,
    "text": ")",
    "type": 0,
  },
  {
    "offset": 101,
    "text": "",
    "type": 0,
  },
  {
    "offset": 101,
    "text": ",",
    "type": 7,
  },
  {
    "offset": 102,
    "text": " 0",
    "type": 0,
  },
  {
    "offset": 104,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 105,
    "text": "0",
    "type": 8,
  },
  {
    "offset": 106,
    "text": ",",
    "type": 7,
  },
  {
    "offset": 107,
    "text": " 0",
    "type": 0,
  },
  {
    "offset": 109,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 110,
    "text": "1",
    "type": 8,
  },
  {
    "offset": 111,
    "text": ")",
    "type": 0,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 9. -175 * math.sin(variable.attack_time * 180) 1`] = `
[
  {
    "offset": 0,
    "text": "",
    "type": 0,
  },
  {
    "offset": 0,
    "text": "-",
    "type": 6,
  },
  {
    "offset": 1,
    "text": "175 ",
    "type": 0,
  },
  {
    "offset": 5,
    "text": "*",
    "type": 6,
  },
  {
    "offset": 6,
    "text": " math",
    "type": 0,
  },
  {
    "offset": 11,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 12,
    "text": "sin",
    "type": 9,
  },
  {
    "offset": 15,
    "text": "(",
    "type": 0,
  },
  {
    "offset": 16,
    "text": "variable",
    "type": 5,
  },
  {
    "offset": 24,
    "text": ".",
    "type": 1,
  },
  {
    "offset": 25,
    "text": "attack_time ",
    "type": 4,
  },
  {
    "offset": 37,
    "text": "*",
    "type": 6,
  },
  {
    "offset": 38,
    "text": " 180",
    "type": 0,
  },
  {
    "offset": 42,
    "text": ")",
    "type": 0,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 10. variable.is_enchanted ? Material.enchanted : Material.default 1`] = `
[
  {
    "offset": 0,
    "text": "variable",
    "type": 5,
  },
  {
    "offset": 8,
    "text": ".",
    "type": 1,
  },
  {
    "offset": 9,
    "text": "is_enchanted ",
    "type": 4,
  },
  {
    "offset": 22,
    "text": "?",
    "type": 6,
  },
  {
    "offset": 23,
    "text": " Material",
    "type": 0,
  },
  {
    "offset": 32,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 33,
    "text": "enchanted ",
    "type": 0,
  },
  {
    "offset": 43,
    "text": ":",
    "type": 6,
  },
  {
    "offset": 44,
    "text": " Material",
    "type": 0,
  },
  {
    "offset": 53,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 54,
    "text": "default",
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 11. variable.has_trim ? variable.trim_path : Texture.default 1`] = `
[
  {
    "offset": 0,
    "text": "variable",
    "type": 5,
  },
  {
    "offset": 8,
    "text": ".",
    "type": 1,
  },
  {
    "offset": 9,
    "text": "has_trim ",
    "type": 4,
  },
  {
    "offset": 18,
    "text": "?",
    "type": 6,
  },
  {
    "offset": 19,
    "text": " variable",
    "type": 0,
  },
  {
    "offset": 28,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 29,
    "text": "trim_path ",
    "type": 0,
  },
  {
    "offset": 39,
    "text": ":",
    "type": 6,
  },
  {
    "offset": 40,
    "text": " Texture",
    "type": 0,
  },
  {
    "offset": 48,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 49,
    "text": "default",
    "type": 9,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 12. !variable.has_trim 1`] = `
[
  {
    "offset": 0,
    "text": "",
    "type": 0,
  },
  {
    "offset": 0,
    "text": "!",
    "type": 6,
  },
  {
    "offset": 1,
    "text": "variable",
    "type": 5,
  },
  {
    "offset": 9,
    "text": ".",
    "type": 1,
  },
  {
    "offset": 10,
    "text": "has_trim",
    "type": 4,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 13. array.skins[query.property('minecraft:has_nectar') + query.is_angry * 2] 1`] = `
[
  {
    "offset": 0,
    "text": "array",
    "type": 5,
  },
  {
    "offset": 5,
    "text": ".",
    "type": 1,
  },
  {
    "offset": 6,
    "text": "skins",
    "type": 4,
  },
  {
    "offset": 11,
    "text": "[",
    "type": 0,
  },
  {
    "offset": 12,
    "text": "query",
    "type": 5,
  },
  {
    "offset": 17,
    "text": ".",
    "type": 1,
  },
  {
    "offset": 18,
    "text": "property",
    "type": 4,
  },
  {
    "offset": 26,
    "text": "(",
    "type": 0,
  },
  {
    "offset": 27,
    "text": "",
    "type": 0,
  },
  {
    "offset": 27,
    "text": "'",
    "type": 0,
  },
  {
    "offset": 28,
    "text": "minecraft",
    "type": 9,
  },
  {
    "offset": 37,
    "text": ":",
    "type": 6,
  },
  {
    "offset": 38,
    "text": "has_nectar",
    "type": 0,
  },
  {
    "offset": 48,
    "text": "'",
    "type": 0,
  },
  {
    "offset": 49,
    "text": "",
    "type": 0,
  },
  {
    "offset": 49,
    "text": ")",
    "type": 0,
  },
  {
    "offset": 50,
    "text": " ",
    "type": 0,
  },
  {
    "offset": 51,
    "text": "+",
    "type": 6,
  },
  {
    "offset": 52,
    "text": " query",
    "type": 0,
  },
  {
    "offset": 58,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 59,
    "text": "is_angry ",
    "type": 0,
  },
  {
    "offset": 68,
    "text": "*",
    "type": 6,
  },
  {
    "offset": 69,
    "text": " 2",
    "type": 0,
  },
  {
    "offset": 71,
    "text": "]",
    "type": 0,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 14. variable.x_head_rotation = math.clamp(query.target_x_rotation, -32.5, 32.5); 1`] = `
[
  {
    "offset": 0,
    "text": "variable",
    "type": 5,
  },
  {
    "offset": 8,
    "text": ".",
    "type": 1,
  },
  {
    "offset": 9,
    "text": "x_head_rotation ",
    "type": 4,
  },
  {
    "offset": 25,
    "text": "=",
    "type": 2,
  },
  {
    "offset": 26,
    "text": " math",
    "type": 0,
  },
  {
    "offset": 31,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 32,
    "text": "clamp",
    "type": 9,
  },
  {
    "offset": 37,
    "text": "(",
    "type": 0,
  },
  {
    "offset": 38,
    "text": "query",
    "type": 5,
  },
  {
    "offset": 43,
    "text": ".",
    "type": 1,
  },
  {
    "offset": 44,
    "text": "target_x_rotation",
    "type": 4,
  },
  {
    "offset": 61,
    "text": ",",
    "type": 7,
  },
  {
    "offset": 62,
    "text": " ",
    "type": 0,
  },
  {
    "offset": 63,
    "text": "-",
    "type": 6,
  },
  {
    "offset": 64,
    "text": "32",
    "type": 8,
  },
  {
    "offset": 66,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 67,
    "text": "5",
    "type": 8,
  },
  {
    "offset": 68,
    "text": ",",
    "type": 7,
  },
  {
    "offset": 69,
    "text": " 32",
    "type": 0,
  },
  {
    "offset": 72,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 73,
    "text": "5",
    "type": 8,
  },
  {
    "offset": 74,
    "text": ")",
    "type": 0,
  },
  {
    "offset": 75,
    "text": "",
    "type": 0,
  },
  {
    "offset": 75,
    "text": ";",
    "type": 7,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 15. variable.y_head_rotation = math.clamp(query.target_y_rotation, -22.5, 25); 1`] = `
[
  {
    "offset": 0,
    "text": "variable",
    "type": 5,
  },
  {
    "offset": 8,
    "text": ".",
    "type": 1,
  },
  {
    "offset": 9,
    "text": "y_head_rotation ",
    "type": 4,
  },
  {
    "offset": 25,
    "text": "=",
    "type": 2,
  },
  {
    "offset": 26,
    "text": " math",
    "type": 0,
  },
  {
    "offset": 31,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 32,
    "text": "clamp",
    "type": 9,
  },
  {
    "offset": 37,
    "text": "(",
    "type": 0,
  },
  {
    "offset": 38,
    "text": "query",
    "type": 5,
  },
  {
    "offset": 43,
    "text": ".",
    "type": 1,
  },
  {
    "offset": 44,
    "text": "target_y_rotation",
    "type": 4,
  },
  {
    "offset": 61,
    "text": ",",
    "type": 7,
  },
  {
    "offset": 62,
    "text": " ",
    "type": 0,
  },
  {
    "offset": 63,
    "text": "-",
    "type": 6,
  },
  {
    "offset": 64,
    "text": "22",
    "type": 8,
  },
  {
    "offset": 66,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 67,
    "text": "5",
    "type": 8,
  },
  {
    "offset": 68,
    "text": ",",
    "type": 7,
  },
  {
    "offset": 69,
    "text": " 25",
    "type": 0,
  },
  {
    "offset": 72,
    "text": ")",
    "type": 0,
  },
  {
    "offset": 73,
    "text": "",
    "type": 0,
  },
  {
    "offset": 73,
    "text": ";",
    "type": 7,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 16. variable.is_rolled_up = query.property('minecraft:armadillo_state') != 'unrolled'; 1`] = `
[
  {
    "offset": 0,
    "text": "variable",
    "type": 5,
  },
  {
    "offset": 8,
    "text": ".",
    "type": 1,
  },
  {
    "offset": 9,
    "text": "is_rolled_up ",
    "type": 4,
  },
  {
    "offset": 22,
    "text": "=",
    "type": 2,
  },
  {
    "offset": 23,
    "text": " query",
    "type": 0,
  },
  {
    "offset": 29,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 30,
    "text": "property",
    "type": 9,
  },
  {
    "offset": 38,
    "text": "(",
    "type": 0,
  },
  {
    "offset": 39,
    "text": "",
    "type": 0,
  },
  {
    "offset": 39,
    "text": "'",
    "type": 0,
  },
  {
    "offset": 40,
    "text": "minecraft",
    "type": 9,
  },
  {
    "offset": 49,
    "text": ":",
    "type": 6,
  },
  {
    "offset": 50,
    "text": "armadillo_state",
    "type": 0,
  },
  {
    "offset": 65,
    "text": "'",
    "type": 0,
  },
  {
    "offset": 66,
    "text": "",
    "type": 0,
  },
  {
    "offset": 66,
    "text": ")",
    "type": 0,
  },
  {
    "offset": 67,
    "text": " ",
    "type": 0,
  },
  {
    "offset": 68,
    "text": "!=",
    "type": 6,
  },
  {
    "offset": 70,
    "text": " ",
    "type": 0,
  },
  {
    "offset": 71,
    "text": "'",
    "type": 0,
  },
  {
    "offset": 72,
    "text": "unrolled",
    "type": 9,
  },
  {
    "offset": 80,
    "text": "'",
    "type": 0,
  },
  {
    "offset": 81,
    "text": "",
    "type": 0,
  },
  {
    "offset": 81,
    "text": ";",
    "type": 7,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 17. variable.rolled_up_time = variable.is_rolled_up ? ((variable.rolled_up_time ?? 0.0) + query.delta_time) : 0.0; 1`] = `
[
  {
    "offset": 0,
    "text": "variable",
    "type": 5,
  },
  {
    "offset": 8,
    "text": ".",
    "type": 1,
  },
  {
    "offset": 9,
    "text": "rolled_up_time ",
    "type": 4,
  },
  {
    "offset": 24,
    "text": "=",
    "type": 2,
  },
  {
    "offset": 25,
    "text": " variable",
    "type": 0,
  },
  {
    "offset": 34,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 35,
    "text": "is_rolled_up ",
    "type": 0,
  },
  {
    "offset": 48,
    "text": "?",
    "type": 6,
  },
  {
    "offset": 49,
    "text": " ",
    "type": 0,
  },
  {
    "offset": 50,
    "text": "(",
    "type": 0,
  },
  {
    "offset": 51,
    "text": "",
    "type": 0,
  },
  {
    "offset": 51,
    "text": "(",
    "type": 0,
  },
  {
    "offset": 52,
    "text": "variable",
    "type": 5,
  },
  {
    "offset": 60,
    "text": ".",
    "type": 1,
  },
  {
    "offset": 61,
    "text": "rolled_up_time ",
    "type": 4,
  },
  {
    "offset": 76,
    "text": "??",
    "type": 6,
  },
  {
    "offset": 78,
    "text": " 0",
    "type": 0,
  },
  {
    "offset": 80,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 81,
    "text": "0",
    "type": 8,
  },
  {
    "offset": 82,
    "text": ")",
    "type": 0,
  },
  {
    "offset": 83,
    "text": " ",
    "type": 0,
  },
  {
    "offset": 84,
    "text": "+",
    "type": 6,
  },
  {
    "offset": 85,
    "text": " query",
    "type": 0,
  },
  {
    "offset": 91,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 92,
    "text": "delta_time",
    "type": 0,
  },
  {
    "offset": 102,
    "text": ")",
    "type": 0,
  },
  {
    "offset": 103,
    "text": " ",
    "type": 0,
  },
  {
    "offset": 104,
    "text": ":",
    "type": 6,
  },
  {
    "offset": 105,
    "text": " 0",
    "type": 0,
  },
  {
    "offset": 107,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 108,
    "text": "0",
    "type": 8,
  },
  {
    "offset": 109,
    "text": ";",
    "type": 7,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 18. variable.is_peeking = query.property('minecraft:armadillo_state') == 'rolled_up_peeking'; 1`] = `
[
  {
    "offset": 0,
    "text": "variable",
    "type": 5,
  },
  {
    "offset": 8,
    "text": ".",
    "type": 1,
  },
  {
    "offset": 9,
    "text": "is_peeking ",
    "type": 4,
  },
  {
    "offset": 20,
    "text": "=",
    "type": 2,
  },
  {
    "offset": 21,
    "text": " query",
    "type": 0,
  },
  {
    "offset": 27,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 28,
    "text": "property",
    "type": 9,
  },
  {
    "offset": 36,
    "text": "(",
    "type": 0,
  },
  {
    "offset": 37,
    "text": "",
    "type": 0,
  },
  {
    "offset": 37,
    "text": "'",
    "type": 0,
  },
  {
    "offset": 38,
    "text": "minecraft",
    "type": 9,
  },
  {
    "offset": 47,
    "text": ":",
    "type": 6,
  },
  {
    "offset": 48,
    "text": "armadillo_state",
    "type": 0,
  },
  {
    "offset": 63,
    "text": "'",
    "type": 0,
  },
  {
    "offset": 64,
    "text": "",
    "type": 0,
  },
  {
    "offset": 64,
    "text": ")",
    "type": 0,
  },
  {
    "offset": 65,
    "text": " ",
    "type": 0,
  },
  {
    "offset": 66,
    "text": "==",
    "type": 6,
  },
  {
    "offset": 68,
    "text": " ",
    "type": 0,
  },
  {
    "offset": 69,
    "text": "'",
    "type": 0,
  },
  {
    "offset": 70,
    "text": "rolled_up_peeking",
    "type": 0,
  },
  {
    "offset": 87,
    "text": "'",
    "type": 0,
  },
  {
    "offset": 88,
    "text": "",
    "type": 0,
  },
  {
    "offset": 88,
    "text": ";",
    "type": 7,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 19. variable.is_unrolling = query.property('minecraft:armadillo_state') == 'rolled_up_unrolling'; 1`] = `
[
  {
    "offset": 0,
    "text": "variable",
    "type": 5,
  },
  {
    "offset": 8,
    "text": ".",
    "type": 1,
  },
  {
    "offset": 9,
    "text": "is_unrolling ",
    "type": 4,
  },
  {
    "offset": 22,
    "text": "=",
    "type": 2,
  },
  {
    "offset": 23,
    "text": " query",
    "type": 0,
  },
  {
    "offset": 29,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 30,
    "text": "property",
    "type": 9,
  },
  {
    "offset": 38,
    "text": "(",
    "type": 0,
  },
  {
    "offset": 39,
    "text": "",
    "type": 0,
  },
  {
    "offset": 39,
    "text": "'",
    "type": 0,
  },
  {
    "offset": 40,
    "text": "minecraft",
    "type": 9,
  },
  {
    "offset": 49,
    "text": ":",
    "type": 6,
  },
  {
    "offset": 50,
    "text": "armadillo_state",
    "type": 0,
  },
  {
    "offset": 65,
    "text": "'",
    "type": 0,
  },
  {
    "offset": 66,
    "text": "",
    "type": 0,
  },
  {
    "offset": 66,
    "text": ")",
    "type": 0,
  },
  {
    "offset": 67,
    "text": " ",
    "type": 0,
  },
  {
    "offset": 68,
    "text": "==",
    "type": 6,
  },
  {
    "offset": 70,
    "text": " ",
    "type": 0,
  },
  {
    "offset": 71,
    "text": "'",
    "type": 0,
  },
  {
    "offset": 72,
    "text": "rolled_up_unrolling",
    "type": 0,
  },
  {
    "offset": 91,
    "text": "'",
    "type": 0,
  },
  {
    "offset": 92,
    "text": "",
    "type": 0,
  },
  {
    "offset": 92,
    "text": ";",
    "type": 7,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 20. variable.unrolling_time = variable.is_unrolling ? ((variable.unrolling_time ?? 0.0) + query.delta_time) : 0.0; 1`] = `
[
  {
    "offset": 0,
    "text": "variable",
    "type": 5,
  },
  {
    "offset": 8,
    "text": ".",
    "type": 1,
  },
  {
    "offset": 9,
    "text": "unrolling_time ",
    "type": 4,
  },
  {
    "offset": 24,
    "text": "=",
    "type": 2,
  },
  {
    "offset": 25,
    "text": " variable",
    "type": 0,
  },
  {
    "offset": 34,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 35,
    "text": "is_unrolling ",
    "type": 0,
  },
  {
    "offset": 48,
    "text": "?",
    "type": 6,
  },
  {
    "offset": 49,
    "text": " ",
    "type": 0,
  },
  {
    "offset": 50,
    "text": "(",
    "type": 0,
  },
  {
    "offset": 51,
    "text": "",
    "type": 0,
  },
  {
    "offset": 51,
    "text": "(",
    "type": 0,
  },
  {
    "offset": 52,
    "text": "variable",
    "type": 5,
  },
  {
    "offset": 60,
    "text": ".",
    "type": 1,
  },
  {
    "offset": 61,
    "text": "unrolling_time ",
    "type": 4,
  },
  {
    "offset": 76,
    "text": "??",
    "type": 6,
  },
  {
    "offset": 78,
    "text": " 0",
    "type": 0,
  },
  {
    "offset": 80,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 81,
    "text": "0",
    "type": 8,
  },
  {
    "offset": 82,
    "text": ")",
    "type": 0,
  },
  {
    "offset": 83,
    "text": " ",
    "type": 0,
  },
  {
    "offset": 84,
    "text": "+",
    "type": 6,
  },
  {
    "offset": 85,
    "text": " query",
    "type": 0,
  },
  {
    "offset": 91,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 92,
    "text": "delta_time",
    "type": 0,
  },
  {
    "offset": 102,
    "text": ")",
    "type": 0,
  },
  {
    "offset": 103,
    "text": " ",
    "type": 0,
  },
  {
    "offset": 104,
    "text": ":",
    "type": 6,
  },
  {
    "offset": 105,
    "text": " 0",
    "type": 0,
  },
  {
    "offset": 107,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 108,
    "text": "0",
    "type": 8,
  },
  {
    "offset": 109,
    "text": ";",
    "type": 7,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 21. variable.use_rolled_up_model = variable.rolled_up_time >= 0.2083 && (variable.unrolling_time == 0.0 || variable.unrolling_time <= 1.25 ); 1`] = `
[
  {
    "offset": 0,
    "text": "variable",
    "type": 5,
  },
  {
    "offset": 8,
    "text": ".",
    "type": 1,
  },
  {
    "offset": 9,
    "text": "use_rolled_up_model ",
    "type": 4,
  },
  {
    "offset": 29,
    "text": "=",
    "type": 2,
  },
  {
    "offset": 30,
    "text": " variable",
    "type": 0,
  },
  {
    "offset": 39,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 40,
    "text": "rolled_up_time ",
    "type": 0,
  },
  {
    "offset": 55,
    "text": ">=",
    "type": 6,
  },
  {
    "offset": 57,
    "text": " 0",
    "type": 0,
  },
  {
    "offset": 59,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 60,
    "text": "2083 ",
    "type": 0,
  },
  {
    "offset": 65,
    "text": "&&",
    "type": 6,
  },
  {
    "offset": 67,
    "text": " ",
    "type": 0,
  },
  {
    "offset": 68,
    "text": "(",
    "type": 0,
  },
  {
    "offset": 69,
    "text": "variable",
    "type": 5,
  },
  {
    "offset": 77,
    "text": ".",
    "type": 1,
  },
  {
    "offset": 78,
    "text": "unrolling_time ",
    "type": 4,
  },
  {
    "offset": 93,
    "text": "==",
    "type": 6,
  },
  {
    "offset": 95,
    "text": " 0",
    "type": 0,
  },
  {
    "offset": 97,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 98,
    "text": "0 ",
    "type": 0,
  },
  {
    "offset": 100,
    "text": "||",
    "type": 6,
  },
  {
    "offset": 102,
    "text": " variable",
    "type": 0,
  },
  {
    "offset": 111,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 112,
    "text": "unrolling_time ",
    "type": 0,
  },
  {
    "offset": 127,
    "text": "<=",
    "type": 6,
  },
  {
    "offset": 129,
    "text": " 1",
    "type": 0,
  },
  {
    "offset": 131,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 132,
    "text": "25 ",
    "type": 0,
  },
  {
    "offset": 135,
    "text": ")",
    "type": 0,
  },
  {
    "offset": 136,
    "text": "",
    "type": 0,
  },
  {
    "offset": 136,
    "text": ";",
    "type": 7,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 22. variable.walking = query.modified_move_speed > 0.01 && !variable.is_rolled_up; 1`] = `
[
  {
    "offset": 0,
    "text": "variable",
    "type": 5,
  },
  {
    "offset": 8,
    "text": ".",
    "type": 1,
  },
  {
    "offset": 9,
    "text": "walking ",
    "type": 4,
  },
  {
    "offset": 17,
    "text": "=",
    "type": 2,
  },
  {
    "offset": 18,
    "text": " query",
    "type": 0,
  },
  {
    "offset": 24,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 25,
    "text": "modified_move_speed ",
    "type": 0,
  },
  {
    "offset": 45,
    "text": ">",
    "type": 6,
  },
  {
    "offset": 46,
    "text": " 0",
    "type": 0,
  },
  {
    "offset": 48,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 49,
    "text": "01 ",
    "type": 0,
  },
  {
    "offset": 52,
    "text": "&&",
    "type": 6,
  },
  {
    "offset": 54,
    "text": " ",
    "type": 0,
  },
  {
    "offset": 55,
    "text": "!",
    "type": 6,
  },
  {
    "offset": 56,
    "text": "variable",
    "type": 5,
  },
  {
    "offset": 64,
    "text": ".",
    "type": 1,
  },
  {
    "offset": 65,
    "text": "is_rolled_up",
    "type": 4,
  },
  {
    "offset": 77,
    "text": ";",
    "type": 7,
  },
]
`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 23. variable.walk_anim_time_update = query.anim_time + math.min(3.0, math.lerp(2.0, 5.0, query.modified_move_speed)) * query.delta_time; 1`] = `
[
  {
    "offset": 0,
    "text": "variable",
    "type": 5,
  },
  {
    "offset": 8,
    "text": ".",
    "type": 1,
  },
  {
    "offset": 9,
    "text": "walk_anim_time_update ",
    "type": 4,
  },
  {
    "offset": 31,
    "text": "=",
    "type": 2,
  },
  {
    "offset": 32,
    "text": " query",
    "type": 0,
  },
  {
    "offset": 38,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 39,
    "text": "anim_time ",
    "type": 0,
  },
  {
    "offset": 49,
    "text": "+",
    "type": 6,
  },
  {
    "offset": 50,
    "text": " math",
    "type": 0,
  },
  {
    "offset": 55,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 56,
    "text": "min",
    "type": 9,
  },
  {
    "offset": 59,
    "text": "(",
    "type": 0,
  },
  {
    "offset": 60,
    "text": "3",
    "type": 8,
  },
  {
    "offset": 61,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 62,
    "text": "0",
    "type": 8,
  },
  {
    "offset": 63,
    "text": ",",
    "type": 7,
  },
  {
    "offset": 64,
    "text": " math",
    "type": 0,
  },
  {
    "offset": 69,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 70,
    "text": "lerp",
    "type": 9,
  },
  {
    "offset": 74,
    "text": "(",
    "type": 0,
  },
  {
    "offset": 75,
    "text": "2",
    "type": 8,
  },
  {
    "offset": 76,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 77,
    "text": "0",
    "type": 8,
  },
  {
    "offset": 78,
    "text": ",",
    "type": 7,
  },
  {
    "offset": 79,
    "text": " 5",
    "type": 0,
  },
  {
    "offset": 81,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 82,
    "text": "0",
    "type": 8,
  },
  {
    "offset": 83,
    "text": ",",
    "type": 7,
  },
  {
    "offset": 84,
    "text": " query",
    "type": 0,
  },
  {
    "offset": 90,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 91,
    "text": "modified_move_speed",
    "type": 0,
  },
  {
    "offset": 110,
    "text": ")",
    "type": 0,
  },
  {
    "offset": 111,
    "text": "",
    "type": 0,
  },
  {
    "offset": 111,
    "text": ")",
    "type": 0,
  },
  {
    "offset": 112,
    "text": " ",
    "type": 0,
  },
  {
    "offset": 113,
    "text": "*",
    "type": 6,
  },
  {
    "offset": 114,
    "text": " query",
    "type": 0,
  },
  {
    "offset": 120,
    "text": ".",
    "type": 7,
  },
  {
    "offset": 121,
    "text": "delta_time",
    "type": 0,
  },
  {
    "offset": 131,
    "text": ";",
    "type": 7,
  },
]
`;
