// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`molang - syntax should be able to parse and match the syntax tree generated 0. variable.agent.anim_state == 2 1`] = `"variable.agent.anim_state"`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 1. variable.agent.anim_state > 2 1`] = `"variable.agent.anim_state"`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 2. variable.agent.anim_state < 2 1`] = `"variable.agent.anim_state"`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 3. variable.agent.anim_state != 2 1`] = `"variable.agent.anim_state"`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 4. variable.agent.anim_state >= 2 1`] = `"variable.agent.anim_state"`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 5. variable.agent.anim_state <= 2 1`] = `"variable.agent.anim_state"`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 6. !variable.swaying && query.all_animations_finished 1`] = `"!"`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 7. 1.5 - math.pow(1.5, 1.0 - 015.0 * query.modified_move_speed) * query.camera_rotation(0) 1`] = `"1.5"`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 8. math.clamp(math.sqrt(math.pow(query.position_delta(0), 2.0) + math.pow(query.position_delta(2), 2.0)), 0.0, 0.1) 1`] = `"math.clamp"`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 9. -175 * math.sin(variable.attack_time * 180) 1`] = `"-"`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 10. variable.is_enchanted ? Material.enchanted : Material.default 1`] = `"variable.is_enchanted"`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 11. variable.has_trim ? variable.trim_path : Texture.default 1`] = `"variable.has_trim"`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 12. !variable.has_trim 1`] = `"!"`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 13. array.skins[query.property('minecraft:has_nectar') + query.is_angry * 2] 1`] = `"array.skins"`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 14. variable.x_head_rotation = math.clamp(query.target_x_rotation, -32.5, 32.5); 1`] = `"variable.x_head_rotation"`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 15. variable.y_head_rotation = math.clamp(query.target_y_rotation, -22.5, 25); 1`] = `"variable.y_head_rotation"`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 16. variable.is_rolled_up = query.property('minecraft:armadillo_state') != 'unrolled'; 1`] = `"variable.is_rolled_up"`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 17. variable.rolled_up_time = variable.is_rolled_up ? ((variable.rolled_up_time ?? 0.0) + query.delta_time) : 0.0; 1`] = `"variable.rolled_up_time"`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 18. variable.is_peeking = query.property('minecraft:armadillo_state') == 'rolled_up_peeking'; 1`] = `"variable.is_peeking"`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 19. variable.is_unrolling = query.property('minecraft:armadillo_state') == 'rolled_up_unrolling'; 1`] = `"variable.is_unrolling"`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 20. variable.unrolling_time = variable.is_unrolling ? ((variable.unrolling_time ?? 0.0) + query.delta_time) : 0.0; 1`] = `"variable.unrolling_time"`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 21. variable.use_rolled_up_model = variable.rolled_up_time >= 0.2083 && (variable.unrolling_time == 0.0 || variable.unrolling_time <= 1.25 ); 1`] = `"variable.use_rolled_up_model"`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 22. variable.walking = query.modified_move_speed > 0.01 && !variable.is_rolled_up; 1`] = `"variable.walking"`;

exports[`molang - syntax should be able to parse and match the syntax tree generated 23. variable.walk_anim_time_update = query.anim_time + math.min(3.0, math.lerp(2.0, 5.0, query.modified_move_speed)) * query.delta_time; 1`] = `"variable.walk_anim_time_update"`;
