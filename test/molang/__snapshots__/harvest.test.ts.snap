// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`MolangSet - harvest 0. !v.swaying && q.all_animations_finished 1`] = `
MolangSet {
  "assigned": Set {},
  "cache": MolangSyntaxCache {
    "_data": Map {
      "!v.swaying && q.all_animations_finished" => [
        {
          "_processed": true,
          "left": {
            "_processed": true,
            "operand": {
              "names": [
                "swaying",
              ],
              "position": 1,
              "scope": "v",
              "type": 12,
            },
            "operator": "!",
            "position": 0,
            "type": 11,
          },
          "operator": "&&",
          "position": 11,
          "right": {
            "arguments": [],
            "names": [
              "all_animations_finished",
            ],
            "position": 14,
            "scope": "q",
            "type": 4,
          },
          "type": 2,
        },
      ],
    },
  },
  "functions": Set {
    {
      "arguments": [],
      "names": [
        "all_animations_finished",
      ],
      "position": 14,
      "scope": "q",
      "type": 4,
    },
  },
  "using": Set {
    {
      "names": [
        "swaying",
      ],
      "position": 1,
      "scope": "v",
      "type": 12,
    },
  },
}
`;

exports[`MolangSet - harvest 1. !variable.swaying && query.all_animations_finished 1`] = `
MolangSet {
  "assigned": Set {},
  "cache": MolangSyntaxCache {
    "_data": Map {
      "!variable.swaying && query.all_animations_finished" => [
        {
          "_processed": true,
          "left": {
            "_processed": true,
            "operand": {
              "names": [
                "swaying",
              ],
              "position": 1,
              "scope": "variable",
              "type": 12,
            },
            "operator": "!",
            "position": 0,
            "type": 11,
          },
          "operator": "&&",
          "position": 18,
          "right": {
            "arguments": [],
            "names": [
              "all_animations_finished",
            ],
            "position": 21,
            "scope": "query",
            "type": 4,
          },
          "type": 2,
        },
      ],
    },
  },
  "functions": Set {
    {
      "arguments": [],
      "names": [
        "all_animations_finished",
      ],
      "position": 21,
      "scope": "query",
      "type": 4,
    },
  },
  "using": Set {
    {
      "names": [
        "swaying",
      ],
      "position": 1,
      "scope": "variable",
      "type": 12,
    },
  },
}
`;

exports[`MolangSet - harvest 2. temp.foo1 = 0; temp.foo2 = 0; t.foo3 = 0; 1`] = `
MolangSet {
  "assigned": Set {
    {
      "names": [
        "foo1",
      ],
      "position": 0,
      "scope": "temp",
      "type": 12,
    },
    {
      "names": [
        "foo2",
      ],
      "position": 15,
      "scope": "temp",
      "type": 12,
    },
    {
      "names": [
        "foo3",
      ],
      "position": 30,
      "scope": "t",
      "type": 12,
    },
  },
  "cache": MolangSyntaxCache {
    "_data": Map {
      "temp.foo1 = 0; temp.foo2 = 0; t.foo3 = 0;" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "foo1",
            ],
            "position": 0,
            "scope": "temp",
            "type": 12,
          },
          "position": 10,
          "right": {
            "position": 12,
            "type": 5,
            "value": "0",
          },
          "type": 1,
        },
        {
          "_processed": true,
          "left": {
            "names": [
              "foo2",
            ],
            "position": 15,
            "scope": "temp",
            "type": 12,
          },
          "position": 25,
          "right": {
            "position": 27,
            "type": 5,
            "value": "0",
          },
          "type": 1,
        },
        {
          "_processed": true,
          "left": {
            "names": [
              "foo3",
            ],
            "position": 30,
            "scope": "t",
            "type": 12,
          },
          "position": 37,
          "right": {
            "position": 39,
            "type": 5,
            "value": "0",
          },
          "type": 1,
        },
      ],
    },
  },
  "functions": Set {},
  "using": Set {},
}
`;

exports[`MolangSet - harvest 3. temp.foo1 = 0; temp.foo2 = 0; t.foo3 = 0; 1`] = `
MolangSet {
  "assigned": Set {
    {
      "names": [
        "foo1",
      ],
      "position": 0,
      "scope": "temp",
      "type": 12,
    },
    {
      "names": [
        "foo2",
      ],
      "position": 15,
      "scope": "temp",
      "type": 12,
    },
    {
      "names": [
        "foo3",
      ],
      "position": 30,
      "scope": "t",
      "type": 12,
    },
  },
  "cache": MolangSyntaxCache {
    "_data": Map {
      "temp.foo1 = 0; temp.foo2 = 0; t.foo3 = 0;" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "foo1",
            ],
            "position": 0,
            "scope": "temp",
            "type": 12,
          },
          "position": 10,
          "right": {
            "position": 12,
            "type": 5,
            "value": "0",
          },
          "type": 1,
        },
        {
          "_processed": true,
          "left": {
            "names": [
              "foo2",
            ],
            "position": 15,
            "scope": "temp",
            "type": 12,
          },
          "position": 25,
          "right": {
            "position": 27,
            "type": 5,
            "value": "0",
          },
          "type": 1,
        },
        {
          "_processed": true,
          "left": {
            "names": [
              "foo3",
            ],
            "position": 30,
            "scope": "t",
            "type": 12,
          },
          "position": 37,
          "right": {
            "position": 39,
            "type": 5,
            "value": "0",
          },
          "type": 1,
        },
      ],
    },
  },
  "functions": Set {},
  "using": Set {},
}
`;

exports[`MolangSet - harvest 4. temp.foo3 = 0; 1`] = `
MolangSet {
  "assigned": Set {
    {
      "names": [
        "foo3",
      ],
      "position": 0,
      "scope": "temp",
      "type": 12,
    },
  },
  "cache": MolangSyntaxCache {
    "_data": Map {
      "temp.foo3 = 0;" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "foo3",
            ],
            "position": 0,
            "scope": "temp",
            "type": 12,
          },
          "position": 10,
          "right": {
            "position": 12,
            "type": 5,
            "value": "0",
          },
          "type": 1,
        },
      ],
    },
  },
  "functions": Set {},
  "using": Set {},
}
`;

exports[`MolangSet - harvest 5. v.agent.anim_state != 2 1`] = `
MolangSet {
  "assigned": Set {},
  "cache": MolangSyntaxCache {
    "_data": Map {
      "v.agent.anim_state != 2" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "agent",
              "anim_state",
            ],
            "position": 0,
            "scope": "v",
            "type": 12,
          },
          "operator": "!=",
          "position": 19,
          "right": {
            "position": 22,
            "type": 5,
            "value": "2",
          },
          "type": 2,
        },
      ],
    },
  },
  "functions": Set {},
  "using": Set {
    {
      "names": [
        "agent",
        "anim_state",
      ],
      "position": 0,
      "scope": "v",
      "type": 12,
    },
  },
}
`;

exports[`MolangSet - harvest 6. v.agent.anim_state < 2 1`] = `
MolangSet {
  "assigned": Set {},
  "cache": MolangSyntaxCache {
    "_data": Map {
      "v.agent.anim_state < 2" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "agent",
              "anim_state",
            ],
            "position": 0,
            "scope": "v",
            "type": 12,
          },
          "operator": "<",
          "position": 19,
          "right": {
            "position": 21,
            "type": 5,
            "value": "2",
          },
          "type": 2,
        },
      ],
    },
  },
  "functions": Set {},
  "using": Set {
    {
      "names": [
        "agent",
        "anim_state",
      ],
      "position": 0,
      "scope": "v",
      "type": 12,
    },
  },
}
`;

exports[`MolangSet - harvest 7. v.agent.anim_state <= 2 1`] = `
MolangSet {
  "assigned": Set {},
  "cache": MolangSyntaxCache {
    "_data": Map {
      "v.agent.anim_state <= 2" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "agent",
              "anim_state",
            ],
            "position": 0,
            "scope": "v",
            "type": 12,
          },
          "operator": "<=",
          "position": 19,
          "right": {
            "position": 22,
            "type": 5,
            "value": "2",
          },
          "type": 2,
        },
      ],
    },
  },
  "functions": Set {},
  "using": Set {
    {
      "names": [
        "agent",
        "anim_state",
      ],
      "position": 0,
      "scope": "v",
      "type": 12,
    },
  },
}
`;

exports[`MolangSet - harvest 8. v.agent.anim_state == 2 1`] = `
MolangSet {
  "assigned": Set {},
  "cache": MolangSyntaxCache {
    "_data": Map {
      "v.agent.anim_state == 2" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "agent",
              "anim_state",
            ],
            "position": 0,
            "scope": "v",
            "type": 12,
          },
          "operator": "==",
          "position": 19,
          "right": {
            "position": 22,
            "type": 5,
            "value": "2",
          },
          "type": 2,
        },
      ],
    },
  },
  "functions": Set {},
  "using": Set {
    {
      "names": [
        "agent",
        "anim_state",
      ],
      "position": 0,
      "scope": "v",
      "type": 12,
    },
  },
}
`;

exports[`MolangSet - harvest 9. v.agent.anim_state > 2 1`] = `
MolangSet {
  "assigned": Set {},
  "cache": MolangSyntaxCache {
    "_data": Map {
      "v.agent.anim_state > 2" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "agent",
              "anim_state",
            ],
            "position": 0,
            "scope": "v",
            "type": 12,
          },
          "operator": ">",
          "position": 19,
          "right": {
            "position": 21,
            "type": 5,
            "value": "2",
          },
          "type": 2,
        },
      ],
    },
  },
  "functions": Set {},
  "using": Set {
    {
      "names": [
        "agent",
        "anim_state",
      ],
      "position": 0,
      "scope": "v",
      "type": 12,
    },
  },
}
`;

exports[`MolangSet - harvest 10. v.agent.anim_state >= 2 1`] = `
MolangSet {
  "assigned": Set {},
  "cache": MolangSyntaxCache {
    "_data": Map {
      "v.agent.anim_state >= 2" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "agent",
              "anim_state",
            ],
            "position": 0,
            "scope": "v",
            "type": 12,
          },
          "operator": ">=",
          "position": 19,
          "right": {
            "position": 22,
            "type": 5,
            "value": "2",
          },
          "type": 2,
        },
      ],
    },
  },
  "functions": Set {},
  "using": Set {
    {
      "names": [
        "agent",
        "anim_state",
      ],
      "position": 0,
      "scope": "v",
      "type": 12,
    },
  },
}
`;

exports[`MolangSet - harvest 11. variable.agent.anim_state != 2 1`] = `
MolangSet {
  "assigned": Set {},
  "cache": MolangSyntaxCache {
    "_data": Map {
      "variable.agent.anim_state != 2" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "agent",
              "anim_state",
            ],
            "position": 0,
            "scope": "variable",
            "type": 12,
          },
          "operator": "!=",
          "position": 26,
          "right": {
            "position": 29,
            "type": 5,
            "value": "2",
          },
          "type": 2,
        },
      ],
    },
  },
  "functions": Set {},
  "using": Set {
    {
      "names": [
        "agent",
        "anim_state",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
  },
}
`;

exports[`MolangSet - harvest 12. variable.agent.anim_state < 2 1`] = `
MolangSet {
  "assigned": Set {},
  "cache": MolangSyntaxCache {
    "_data": Map {
      "variable.agent.anim_state < 2" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "agent",
              "anim_state",
            ],
            "position": 0,
            "scope": "variable",
            "type": 12,
          },
          "operator": "<",
          "position": 26,
          "right": {
            "position": 28,
            "type": 5,
            "value": "2",
          },
          "type": 2,
        },
      ],
    },
  },
  "functions": Set {},
  "using": Set {
    {
      "names": [
        "agent",
        "anim_state",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
  },
}
`;

exports[`MolangSet - harvest 13. variable.agent.anim_state <= 2 1`] = `
MolangSet {
  "assigned": Set {},
  "cache": MolangSyntaxCache {
    "_data": Map {
      "variable.agent.anim_state <= 2" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "agent",
              "anim_state",
            ],
            "position": 0,
            "scope": "variable",
            "type": 12,
          },
          "operator": "<=",
          "position": 26,
          "right": {
            "position": 29,
            "type": 5,
            "value": "2",
          },
          "type": 2,
        },
      ],
    },
  },
  "functions": Set {},
  "using": Set {
    {
      "names": [
        "agent",
        "anim_state",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
  },
}
`;

exports[`MolangSet - harvest 14. variable.agent.anim_state == 2 1`] = `
MolangSet {
  "assigned": Set {},
  "cache": MolangSyntaxCache {
    "_data": Map {
      "variable.agent.anim_state == 2" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "agent",
              "anim_state",
            ],
            "position": 0,
            "scope": "variable",
            "type": 12,
          },
          "operator": "==",
          "position": 26,
          "right": {
            "position": 29,
            "type": 5,
            "value": "2",
          },
          "type": 2,
        },
      ],
    },
  },
  "functions": Set {},
  "using": Set {
    {
      "names": [
        "agent",
        "anim_state",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
  },
}
`;

exports[`MolangSet - harvest 15. variable.agent.anim_state > 2 1`] = `
MolangSet {
  "assigned": Set {},
  "cache": MolangSyntaxCache {
    "_data": Map {
      "variable.agent.anim_state > 2" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "agent",
              "anim_state",
            ],
            "position": 0,
            "scope": "variable",
            "type": 12,
          },
          "operator": ">",
          "position": 26,
          "right": {
            "position": 28,
            "type": 5,
            "value": "2",
          },
          "type": 2,
        },
      ],
    },
  },
  "functions": Set {},
  "using": Set {
    {
      "names": [
        "agent",
        "anim_state",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
  },
}
`;

exports[`MolangSet - harvest 16. variable.agent.anim_state >= 2 1`] = `
MolangSet {
  "assigned": Set {},
  "cache": MolangSyntaxCache {
    "_data": Map {
      "variable.agent.anim_state >= 2" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "agent",
              "anim_state",
            ],
            "position": 0,
            "scope": "variable",
            "type": 12,
          },
          "operator": ">=",
          "position": 26,
          "right": {
            "position": 29,
            "type": 5,
            "value": "2",
          },
          "type": 2,
        },
      ],
    },
  },
  "functions": Set {},
  "using": Set {
    {
      "names": [
        "agent",
        "anim_state",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
  },
}
`;

exports[`MolangSet - harvest 17. variable.armor_stand.hurt_time = 0; 1`] = `
MolangSet {
  "assigned": Set {
    {
      "names": [
        "armor_stand",
        "hurt_time",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
  },
  "cache": MolangSyntaxCache {
    "_data": Map {
      "variable.armor_stand.hurt_time = 0;" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "armor_stand",
              "hurt_time",
            ],
            "position": 0,
            "scope": "variable",
            "type": 12,
          },
          "position": 31,
          "right": {
            "position": 33,
            "type": 5,
            "value": "0",
          },
          "type": 1,
        },
      ],
    },
  },
  "functions": Set {},
  "using": Set {},
}
`;

exports[`MolangSet - harvest 18. variable.armor_stand.pose_index = 0; 1`] = `
MolangSet {
  "assigned": Set {
    {
      "names": [
        "armor_stand",
        "pose_index",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
  },
  "cache": MolangSyntaxCache {
    "_data": Map {
      "variable.armor_stand.pose_index = 0;" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "armor_stand",
              "pose_index",
            ],
            "position": 0,
            "scope": "variable",
            "type": 12,
          },
          "position": 32,
          "right": {
            "position": 34,
            "type": 5,
            "value": "0",
          },
          "type": 1,
        },
      ],
    },
  },
  "functions": Set {},
  "using": Set {},
}
`;

exports[`MolangSet - harvest 19. variable.foo1 = 0; variable.foo2 = 0; v.foo3 = 0; 1`] = `
MolangSet {
  "assigned": Set {
    {
      "names": [
        "foo1",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
    {
      "names": [
        "foo2",
      ],
      "position": 19,
      "scope": "variable",
      "type": 12,
    },
    {
      "names": [
        "foo3",
      ],
      "position": 38,
      "scope": "v",
      "type": 12,
    },
  },
  "cache": MolangSyntaxCache {
    "_data": Map {
      "variable.foo1 = 0; variable.foo2 = 0; v.foo3 = 0;" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "foo1",
            ],
            "position": 0,
            "scope": "variable",
            "type": 12,
          },
          "position": 14,
          "right": {
            "position": 16,
            "type": 5,
            "value": "0",
          },
          "type": 1,
        },
        {
          "_processed": true,
          "left": {
            "names": [
              "foo2",
            ],
            "position": 19,
            "scope": "variable",
            "type": 12,
          },
          "position": 33,
          "right": {
            "position": 35,
            "type": 5,
            "value": "0",
          },
          "type": 1,
        },
        {
          "_processed": true,
          "left": {
            "names": [
              "foo3",
            ],
            "position": 38,
            "scope": "v",
            "type": 12,
          },
          "position": 45,
          "right": {
            "position": 47,
            "type": 5,
            "value": "0",
          },
          "type": 1,
        },
      ],
    },
  },
  "functions": Set {},
  "using": Set {},
}
`;

exports[`MolangSet - harvest 20. variable.foo1 = 0; variable.foo2 = 0; v.foo3 = 0; 1`] = `
MolangSet {
  "assigned": Set {
    {
      "names": [
        "foo1",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
    {
      "names": [
        "foo2",
      ],
      "position": 19,
      "scope": "variable",
      "type": 12,
    },
    {
      "names": [
        "foo3",
      ],
      "position": 38,
      "scope": "v",
      "type": 12,
    },
  },
  "cache": MolangSyntaxCache {
    "_data": Map {
      "variable.foo1 = 0; variable.foo2 = 0; v.foo3 = 0;" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "foo1",
            ],
            "position": 0,
            "scope": "variable",
            "type": 12,
          },
          "position": 14,
          "right": {
            "position": 16,
            "type": 5,
            "value": "0",
          },
          "type": 1,
        },
        {
          "_processed": true,
          "left": {
            "names": [
              "foo2",
            ],
            "position": 19,
            "scope": "variable",
            "type": 12,
          },
          "position": 33,
          "right": {
            "position": 35,
            "type": 5,
            "value": "0",
          },
          "type": 1,
        },
        {
          "_processed": true,
          "left": {
            "names": [
              "foo3",
            ],
            "position": 38,
            "scope": "v",
            "type": 12,
          },
          "position": 45,
          "right": {
            "position": 47,
            "type": 5,
            "value": "0",
          },
          "type": 1,
        },
      ],
    },
  },
  "functions": Set {},
  "using": Set {},
}
`;

exports[`MolangSet - harvest 21. variable.foo3 = 0; 1`] = `
MolangSet {
  "assigned": Set {
    {
      "names": [
        "foo3",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
  },
  "cache": MolangSyntaxCache {
    "_data": Map {
      "variable.foo3 = 0;" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "foo3",
            ],
            "position": 0,
            "scope": "variable",
            "type": 12,
          },
          "position": 14,
          "right": {
            "position": 16,
            "type": 5,
            "value": "0",
          },
          "type": 1,
        },
      ],
    },
  },
  "functions": Set {},
  "using": Set {},
}
`;

exports[`MolangSet - harvest 22. -175 * math.sin(variable.attack_time * 180) 1`] = `
MolangSet {
  "assigned": Set {},
  "cache": MolangSyntaxCache {
    "_data": Map {
      "-175 * math.sin(variable.attack_time * 180)" => [
        {
          "_processed": true,
          "left": {
            "_processed": true,
            "operand": {
              "position": 1,
              "type": 5,
              "value": "175",
            },
            "operator": "-",
            "position": 0,
            "type": 11,
          },
          "operator": "*",
          "position": 5,
          "right": {
            "arguments": [
              {
                "_processed": true,
                "left": {
                  "names": [
                    "attack_time",
                  ],
                  "position": 16,
                  "scope": "variable",
                  "type": 12,
                },
                "operator": "*",
                "position": 37,
                "right": {
                  "position": 39,
                  "type": 5,
                  "value": "180",
                },
                "type": 2,
              },
            ],
            "names": [
              "sin",
            ],
            "position": 7,
            "scope": "math",
            "type": 4,
          },
          "type": 2,
        },
      ],
    },
  },
  "functions": Set {
    {
      "arguments": [
        {
          "_processed": true,
          "left": {
            "names": [
              "attack_time",
            ],
            "position": 16,
            "scope": "variable",
            "type": 12,
          },
          "operator": "*",
          "position": 37,
          "right": {
            "position": 39,
            "type": 5,
            "value": "180",
          },
          "type": 2,
        },
      ],
      "names": [
        "sin",
      ],
      "position": 7,
      "scope": "math",
      "type": 4,
    },
  },
  "using": Set {
    {
      "names": [
        "attack_time",
      ],
      "position": 16,
      "scope": "variable",
      "type": 12,
    },
  },
}
`;

exports[`MolangSet - harvest 23. -5.0 * Math.cos(297.9380535 * query.anim_time) - 5.0 1`] = `
MolangSet {
  "assigned": Set {},
  "cache": MolangSyntaxCache {
    "_data": Map {
      "-5.0 * Math.cos(297.9380535 * query.anim_time) - 5.0" => [
        {
          "_processed": true,
          "left": {
            "_processed": true,
            "left": {
              "_processed": true,
              "operand": {
                "position": 1,
                "type": 5,
                "value": "5.0",
              },
              "operator": "-",
              "position": 0,
              "type": 11,
            },
            "operator": "*",
            "position": 5,
            "right": {
              "arguments": [
                {
                  "_processed": true,
                  "left": {
                    "position": 16,
                    "type": 5,
                    "value": "297.9380535",
                  },
                  "operator": "*",
                  "position": 28,
                  "right": {
                    "arguments": [],
                    "names": [
                      "anim_time",
                    ],
                    "position": 30,
                    "scope": "query",
                    "type": 4,
                  },
                  "type": 2,
                },
              ],
              "names": [
                "cos",
              ],
              "position": 7,
              "scope": "math",
              "type": 4,
            },
            "type": 2,
          },
          "operator": "-",
          "position": 47,
          "right": {
            "position": 49,
            "type": 5,
            "value": "5.0",
          },
          "type": 2,
        },
      ],
    },
  },
  "functions": Set {
    {
      "arguments": [
        {
          "_processed": true,
          "left": {
            "position": 16,
            "type": 5,
            "value": "297.9380535",
          },
          "operator": "*",
          "position": 28,
          "right": {
            "arguments": [],
            "names": [
              "anim_time",
            ],
            "position": 30,
            "scope": "query",
            "type": 4,
          },
          "type": 2,
        },
      ],
      "names": [
        "cos",
      ],
      "position": 7,
      "scope": "math",
      "type": 4,
    },
    {
      "arguments": [],
      "names": [
        "anim_time",
      ],
      "position": 30,
      "scope": "query",
      "type": 4,
    },
  },
  "using": Set {},
}
`;

exports[`MolangSet - harvest 24. 1.5 - math.pow(1.5, 1.0 - 015.0 * query.modified_move_speed) * query.camera_rotation(0) 1`] = `
MolangSet {
  "assigned": Set {},
  "cache": MolangSyntaxCache {
    "_data": Map {
      "1.5 - math.pow(1.5, 1.0 - 015.0 * query.modified_move_speed) * query.camera_rotation(0)" => [
        {
          "_processed": true,
          "left": {
            "position": 0,
            "type": 5,
            "value": "1.5",
          },
          "operator": "-",
          "position": 4,
          "right": {
            "_processed": true,
            "left": {
              "arguments": [
                {
                  "position": 15,
                  "type": 5,
                  "value": "1.5",
                },
                {
                  "_processed": true,
                  "left": {
                    "position": 20,
                    "type": 5,
                    "value": "1.0",
                  },
                  "operator": "-",
                  "position": 24,
                  "right": {
                    "_processed": true,
                    "left": {
                      "position": 26,
                      "type": 5,
                      "value": "015.0",
                    },
                    "operator": "*",
                    "position": 32,
                    "right": {
                      "arguments": [],
                      "names": [
                        "modified_move_speed",
                      ],
                      "position": 34,
                      "scope": "query",
                      "type": 4,
                    },
                    "type": 2,
                  },
                  "type": 2,
                },
              ],
              "names": [
                "pow",
              ],
              "position": 6,
              "scope": "math",
              "type": 4,
            },
            "operator": "*",
            "position": 61,
            "right": {
              "arguments": [
                {
                  "position": 85,
                  "type": 5,
                  "value": "0",
                },
              ],
              "names": [
                "camera_rotation",
              ],
              "position": 63,
              "scope": "query",
              "type": 4,
            },
            "type": 2,
          },
          "type": 2,
        },
      ],
    },
  },
  "functions": Set {
    {
      "arguments": [
        {
          "position": 15,
          "type": 5,
          "value": "1.5",
        },
        {
          "_processed": true,
          "left": {
            "position": 20,
            "type": 5,
            "value": "1.0",
          },
          "operator": "-",
          "position": 24,
          "right": {
            "_processed": true,
            "left": {
              "position": 26,
              "type": 5,
              "value": "015.0",
            },
            "operator": "*",
            "position": 32,
            "right": {
              "arguments": [],
              "names": [
                "modified_move_speed",
              ],
              "position": 34,
              "scope": "query",
              "type": 4,
            },
            "type": 2,
          },
          "type": 2,
        },
      ],
      "names": [
        "pow",
      ],
      "position": 6,
      "scope": "math",
      "type": 4,
    },
    {
      "arguments": [
        {
          "position": 85,
          "type": 5,
          "value": "0",
        },
      ],
      "names": [
        "camera_rotation",
      ],
      "position": 63,
      "scope": "query",
      "type": 4,
    },
    {
      "arguments": [],
      "names": [
        "modified_move_speed",
      ],
      "position": 34,
      "scope": "query",
      "type": 4,
    },
  },
  "using": Set {},
}
`;

exports[`MolangSet - harvest 25. math.clamp(math.sqrt(math.pow(query.position_delta(0), 2.0) + math.pow(query.position_delta(2), 2.0)), 0.0, 0.1) 1`] = `
MolangSet {
  "assigned": Set {},
  "cache": MolangSyntaxCache {
    "_data": Map {
      "math.clamp(math.sqrt(math.pow(query.position_delta(0), 2.0) + math.pow(query.position_delta(2), 2.0)), 0.0, 0.1)" => [
        {
          "arguments": [
            {
              "arguments": [
                {
                  "_processed": true,
                  "left": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "position": 51,
                            "type": 5,
                            "value": "0",
                          },
                        ],
                        "names": [
                          "position_delta",
                        ],
                        "position": 30,
                        "scope": "query",
                        "type": 4,
                      },
                      {
                        "position": 55,
                        "type": 5,
                        "value": "2.0",
                      },
                    ],
                    "names": [
                      "pow",
                    ],
                    "position": 21,
                    "scope": "math",
                    "type": 4,
                  },
                  "operator": "+",
                  "position": 60,
                  "right": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "position": 92,
                            "type": 5,
                            "value": "2",
                          },
                        ],
                        "names": [
                          "position_delta",
                        ],
                        "position": 71,
                        "scope": "query",
                        "type": 4,
                      },
                      {
                        "position": 96,
                        "type": 5,
                        "value": "2.0",
                      },
                    ],
                    "names": [
                      "pow",
                    ],
                    "position": 62,
                    "scope": "math",
                    "type": 4,
                  },
                  "type": 2,
                },
              ],
              "names": [
                "sqrt",
              ],
              "position": 11,
              "scope": "math",
              "type": 4,
            },
            {
              "position": 103,
              "type": 5,
              "value": "0.0",
            },
            {
              "position": 108,
              "type": 5,
              "value": "0.1",
            },
          ],
          "names": [
            "clamp",
          ],
          "position": 0,
          "scope": "math",
          "type": 4,
        },
      ],
    },
  },
  "functions": Set {
    {
      "arguments": [
        {
          "arguments": [
            {
              "_processed": true,
              "left": {
                "arguments": [
                  {
                    "arguments": [
                      {
                        "position": 51,
                        "type": 5,
                        "value": "0",
                      },
                    ],
                    "names": [
                      "position_delta",
                    ],
                    "position": 30,
                    "scope": "query",
                    "type": 4,
                  },
                  {
                    "position": 55,
                    "type": 5,
                    "value": "2.0",
                  },
                ],
                "names": [
                  "pow",
                ],
                "position": 21,
                "scope": "math",
                "type": 4,
              },
              "operator": "+",
              "position": 60,
              "right": {
                "arguments": [
                  {
                    "arguments": [
                      {
                        "position": 92,
                        "type": 5,
                        "value": "2",
                      },
                    ],
                    "names": [
                      "position_delta",
                    ],
                    "position": 71,
                    "scope": "query",
                    "type": 4,
                  },
                  {
                    "position": 96,
                    "type": 5,
                    "value": "2.0",
                  },
                ],
                "names": [
                  "pow",
                ],
                "position": 62,
                "scope": "math",
                "type": 4,
              },
              "type": 2,
            },
          ],
          "names": [
            "sqrt",
          ],
          "position": 11,
          "scope": "math",
          "type": 4,
        },
        {
          "position": 103,
          "type": 5,
          "value": "0.0",
        },
        {
          "position": 108,
          "type": 5,
          "value": "0.1",
        },
      ],
      "names": [
        "clamp",
      ],
      "position": 0,
      "scope": "math",
      "type": 4,
    },
    {
      "arguments": [
        {
          "_processed": true,
          "left": {
            "arguments": [
              {
                "arguments": [
                  {
                    "position": 51,
                    "type": 5,
                    "value": "0",
                  },
                ],
                "names": [
                  "position_delta",
                ],
                "position": 30,
                "scope": "query",
                "type": 4,
              },
              {
                "position": 55,
                "type": 5,
                "value": "2.0",
              },
            ],
            "names": [
              "pow",
            ],
            "position": 21,
            "scope": "math",
            "type": 4,
          },
          "operator": "+",
          "position": 60,
          "right": {
            "arguments": [
              {
                "arguments": [
                  {
                    "position": 92,
                    "type": 5,
                    "value": "2",
                  },
                ],
                "names": [
                  "position_delta",
                ],
                "position": 71,
                "scope": "query",
                "type": 4,
              },
              {
                "position": 96,
                "type": 5,
                "value": "2.0",
              },
            ],
            "names": [
              "pow",
            ],
            "position": 62,
            "scope": "math",
            "type": 4,
          },
          "type": 2,
        },
      ],
      "names": [
        "sqrt",
      ],
      "position": 11,
      "scope": "math",
      "type": 4,
    },
    {
      "arguments": [
        {
          "arguments": [
            {
              "position": 51,
              "type": 5,
              "value": "0",
            },
          ],
          "names": [
            "position_delta",
          ],
          "position": 30,
          "scope": "query",
          "type": 4,
        },
        {
          "position": 55,
          "type": 5,
          "value": "2.0",
        },
      ],
      "names": [
        "pow",
      ],
      "position": 21,
      "scope": "math",
      "type": 4,
    },
    {
      "arguments": [
        {
          "arguments": [
            {
              "position": 92,
              "type": 5,
              "value": "2",
            },
          ],
          "names": [
            "position_delta",
          ],
          "position": 71,
          "scope": "query",
          "type": 4,
        },
        {
          "position": 96,
          "type": 5,
          "value": "2.0",
        },
      ],
      "names": [
        "pow",
      ],
      "position": 62,
      "scope": "math",
      "type": 4,
    },
    {
      "arguments": [
        {
          "position": 51,
          "type": 5,
          "value": "0",
        },
      ],
      "names": [
        "position_delta",
      ],
      "position": 30,
      "scope": "query",
      "type": 4,
    },
    {
      "arguments": [
        {
          "position": 92,
          "type": 5,
          "value": "2",
        },
      ],
      "names": [
        "position_delta",
      ],
      "position": 71,
      "scope": "query",
      "type": 4,
    },
  },
  "using": Set {},
}
`;

exports[`MolangSet - harvest 26. math.sin(variable.attack_time * 180) * -175 1`] = `
MolangSet {
  "assigned": Set {},
  "cache": MolangSyntaxCache {
    "_data": Map {
      "math.sin(variable.attack_time * 180) * -175" => [
        {
          "_processed": true,
          "left": {
            "arguments": [
              {
                "_processed": true,
                "left": {
                  "names": [
                    "attack_time",
                  ],
                  "position": 9,
                  "scope": "variable",
                  "type": 12,
                },
                "operator": "*",
                "position": 30,
                "right": {
                  "position": 32,
                  "type": 5,
                  "value": "180",
                },
                "type": 2,
              },
            ],
            "names": [
              "sin",
            ],
            "position": 0,
            "scope": "math",
            "type": 4,
          },
          "operator": "*",
          "position": 37,
          "right": {
            "_processed": true,
            "operand": {
              "position": 40,
              "type": 5,
              "value": "175",
            },
            "operator": "-",
            "position": 39,
            "type": 11,
          },
          "type": 2,
        },
      ],
    },
  },
  "functions": Set {
    {
      "arguments": [
        {
          "_processed": true,
          "left": {
            "names": [
              "attack_time",
            ],
            "position": 9,
            "scope": "variable",
            "type": 12,
          },
          "operator": "*",
          "position": 30,
          "right": {
            "position": 32,
            "type": 5,
            "value": "180",
          },
          "type": 2,
        },
      ],
      "names": [
        "sin",
      ],
      "position": 0,
      "scope": "math",
      "type": 4,
    },
  },
  "using": Set {
    {
      "names": [
        "attack_time",
      ],
      "position": 9,
      "scope": "variable",
      "type": 12,
    },
  },
}
`;

exports[`MolangSet - harvest 27. !variable.has_trim 1`] = `
MolangSet {
  "assigned": Set {},
  "cache": MolangSyntaxCache {
    "_data": Map {
      "!variable.has_trim" => [
        {
          "_processed": true,
          "operand": {
            "names": [
              "has_trim",
            ],
            "position": 1,
            "scope": "variable",
            "type": 12,
          },
          "operator": "!",
          "position": 0,
          "type": 11,
        },
      ],
    },
  },
  "functions": Set {},
  "using": Set {
    {
      "names": [
        "has_trim",
      ],
      "position": 1,
      "scope": "variable",
      "type": 12,
    },
  },
}
`;

exports[`MolangSet - harvest 29. variable.has_trim ? variable.trim_path : Texture.default 1`] = `
MolangSet {
  "assigned": Set {},
  "cache": MolangSyntaxCache {
    "_data": Map {
      "variable.has_trim ? variable.trim_path : Texture.default" => [
        {
          "_processed": true,
          "condition": {
            "names": [
              "has_trim",
            ],
            "position": 0,
            "scope": "variable",
            "type": 12,
          },
          "falseExpression": {
            "names": [
              "default",
            ],
            "position": 41,
            "scope": "texture",
            "type": 8,
          },
          "position": 18,
          "trueExpression": {
            "names": [
              "trim_path",
            ],
            "position": 20,
            "scope": "variable",
            "type": 12,
          },
          "type": 3,
        },
      ],
    },
  },
  "functions": Set {},
  "using": Set {
    {
      "names": [
        "has_trim",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
    {
      "names": [
        "trim_path",
      ],
      "position": 20,
      "scope": "variable",
      "type": 12,
    },
    {
      "names": [
        "default",
      ],
      "position": 41,
      "scope": "texture",
      "type": 8,
    },
  },
}
`;

exports[`MolangSet - harvest 30. variable.is_enchanted ? Material.enchanted : Material.default 1`] = `
MolangSet {
  "assigned": Set {},
  "cache": MolangSyntaxCache {
    "_data": Map {
      "variable.is_enchanted ? Material.enchanted : Material.default" => [
        {
          "_processed": true,
          "condition": {
            "names": [
              "is_enchanted",
            ],
            "position": 0,
            "scope": "variable",
            "type": 12,
          },
          "falseExpression": {
            "names": [
              "default",
            ],
            "position": 45,
            "scope": "material",
            "type": 8,
          },
          "position": 22,
          "trueExpression": {
            "names": [
              "enchanted",
            ],
            "position": 24,
            "scope": "material",
            "type": 8,
          },
          "type": 3,
        },
      ],
    },
  },
  "functions": Set {},
  "using": Set {
    {
      "names": [
        "is_enchanted",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
    {
      "names": [
        "enchanted",
      ],
      "position": 24,
      "scope": "material",
      "type": 8,
    },
    {
      "names": [
        "default",
      ],
      "position": 45,
      "scope": "material",
      "type": 8,
    },
  },
}
`;

exports[`MolangSet - harvest 32. variable.is_rolled_up = (variable.unrolling_time == 0.0 || variable.unrolling_time <= 1.25 ); 1`] = `
MolangSet {
  "assigned": Set {
    {
      "names": [
        "is_rolled_up",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
  },
  "cache": MolangSyntaxCache {
    "_data": Map {
      "variable.is_rolled_up = (variable.unrolling_time == 0.0 || variable.unrolling_time <= 1.25 );" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "is_rolled_up",
            ],
            "position": 0,
            "scope": "variable",
            "type": 12,
          },
          "position": 22,
          "right": {
            "_processed": true,
            "left": {
              "_processed": true,
              "left": {
                "names": [
                  "unrolling_time",
                ],
                "position": 25,
                "scope": "variable",
                "type": 12,
              },
              "operator": "==",
              "position": 49,
              "right": {
                "position": 52,
                "type": 5,
                "value": "0.0",
              },
              "type": 2,
            },
            "operator": "||",
            "position": 56,
            "right": {
              "_processed": true,
              "left": {
                "names": [
                  "unrolling_time",
                ],
                "position": 59,
                "scope": "variable",
                "type": 12,
              },
              "operator": "<=",
              "position": 83,
              "right": {
                "position": 86,
                "type": 5,
                "value": "1.25",
              },
              "type": 2,
            },
            "type": 2,
          },
          "type": 1,
        },
      ],
    },
  },
  "functions": Set {},
  "using": Set {
    {
      "names": [
        "unrolling_time",
      ],
      "position": 25,
      "scope": "variable",
      "type": 12,
    },
    {
      "names": [
        "unrolling_time",
      ],
      "position": 59,
      "scope": "variable",
      "type": 12,
    },
  },
}
`;

exports[`MolangSet - harvest 33. variable.is_rolled_up = (variable.unrolling_time == 0.0 || variable.unrolling_time <= 1.25 || variable.unrolling_time >= 5 ); 1`] = `
MolangSet {
  "assigned": Set {
    {
      "names": [
        "is_rolled_up",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
  },
  "cache": MolangSyntaxCache {
    "_data": Map {
      "variable.is_rolled_up = (variable.unrolling_time == 0.0 || variable.unrolling_time <= 1.25 || variable.unrolling_time >= 5 );" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "is_rolled_up",
            ],
            "position": 0,
            "scope": "variable",
            "type": 12,
          },
          "position": 22,
          "right": {
            "_processed": true,
            "left": {
              "_processed": true,
              "left": {
                "_processed": true,
                "left": {
                  "names": [
                    "unrolling_time",
                  ],
                  "position": 25,
                  "scope": "variable",
                  "type": 12,
                },
                "operator": "==",
                "position": 49,
                "right": {
                  "position": 52,
                  "type": 5,
                  "value": "0.0",
                },
                "type": 2,
              },
              "operator": "||",
              "position": 56,
              "right": {
                "_processed": true,
                "left": {
                  "names": [
                    "unrolling_time",
                  ],
                  "position": 59,
                  "scope": "variable",
                  "type": 12,
                },
                "operator": "<=",
                "position": 83,
                "right": {
                  "position": 86,
                  "type": 5,
                  "value": "1.25",
                },
                "type": 2,
              },
              "type": 2,
            },
            "operator": "||",
            "position": 91,
            "right": {
              "_processed": true,
              "left": {
                "names": [
                  "unrolling_time",
                ],
                "position": 94,
                "scope": "variable",
                "type": 12,
              },
              "operator": ">=",
              "position": 118,
              "right": {
                "position": 121,
                "type": 5,
                "value": "5",
              },
              "type": 2,
            },
            "type": 2,
          },
          "type": 1,
        },
      ],
    },
  },
  "functions": Set {},
  "using": Set {
    {
      "names": [
        "unrolling_time",
      ],
      "position": 94,
      "scope": "variable",
      "type": 12,
    },
    {
      "names": [
        "unrolling_time",
      ],
      "position": 25,
      "scope": "variable",
      "type": 12,
    },
    {
      "names": [
        "unrolling_time",
      ],
      "position": 59,
      "scope": "variable",
      "type": 12,
    },
  },
}
`;

exports[`MolangSet - harvest 36. variable.rolled_up_time = variable.is_rolled_up ? ((variable.rolled_up_time ?? 0.0) + query.delta_time) : 0.0; 1`] = `
MolangSet {
  "assigned": Set {
    {
      "names": [
        "rolled_up_time",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
  },
  "cache": MolangSyntaxCache {
    "_data": Map {
      "variable.rolled_up_time = variable.is_rolled_up ? ((variable.rolled_up_time ?? 0.0) + query.delta_time) : 0.0;" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "rolled_up_time",
            ],
            "position": 0,
            "scope": "variable",
            "type": 12,
          },
          "position": 24,
          "right": {
            "_processed": true,
            "condition": {
              "names": [
                "is_rolled_up",
              ],
              "position": 26,
              "scope": "variable",
              "type": 12,
            },
            "falseExpression": {
              "position": 106,
              "type": 5,
              "value": "0.0",
            },
            "position": 48,
            "trueExpression": {
              "_processed": true,
              "left": {
                "_processed": true,
                "left": {
                  "names": [
                    "rolled_up_time",
                  ],
                  "position": 52,
                  "scope": "variable",
                  "type": 12,
                },
                "position": 76,
                "right": {
                  "position": 79,
                  "type": 5,
                  "value": "0.0",
                },
                "type": 7,
              },
              "operator": "+",
              "position": 84,
              "right": {
                "arguments": [],
                "names": [
                  "delta_time",
                ],
                "position": 86,
                "scope": "query",
                "type": 4,
              },
              "type": 2,
            },
            "type": 3,
          },
          "type": 1,
        },
      ],
    },
  },
  "functions": Set {
    {
      "arguments": [],
      "names": [
        "delta_time",
      ],
      "position": 86,
      "scope": "query",
      "type": 4,
    },
  },
  "using": Set {
    {
      "names": [
        "is_rolled_up",
      ],
      "position": 26,
      "scope": "variable",
      "type": 12,
    },
    {
      "names": [
        "rolled_up_time",
      ],
      "position": 52,
      "scope": "variable",
      "type": 12,
    },
  },
}
`;

exports[`MolangSet - harvest 37. variable.unrolling_time = variable.is_unrolling ? ((variable.unrolling_time ?? 0.0) + query.delta_time) : 0.0; 1`] = `
MolangSet {
  "assigned": Set {
    {
      "names": [
        "unrolling_time",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
  },
  "cache": MolangSyntaxCache {
    "_data": Map {
      "variable.unrolling_time = variable.is_unrolling ? ((variable.unrolling_time ?? 0.0) + query.delta_time) : 0.0;" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "unrolling_time",
            ],
            "position": 0,
            "scope": "variable",
            "type": 12,
          },
          "position": 24,
          "right": {
            "_processed": true,
            "condition": {
              "names": [
                "is_unrolling",
              ],
              "position": 26,
              "scope": "variable",
              "type": 12,
            },
            "falseExpression": {
              "position": 106,
              "type": 5,
              "value": "0.0",
            },
            "position": 48,
            "trueExpression": {
              "_processed": true,
              "left": {
                "_processed": true,
                "left": {
                  "names": [
                    "unrolling_time",
                  ],
                  "position": 52,
                  "scope": "variable",
                  "type": 12,
                },
                "position": 76,
                "right": {
                  "position": 79,
                  "type": 5,
                  "value": "0.0",
                },
                "type": 7,
              },
              "operator": "+",
              "position": 84,
              "right": {
                "arguments": [],
                "names": [
                  "delta_time",
                ],
                "position": 86,
                "scope": "query",
                "type": 4,
              },
              "type": 2,
            },
            "type": 3,
          },
          "type": 1,
        },
      ],
    },
  },
  "functions": Set {
    {
      "arguments": [],
      "names": [
        "delta_time",
      ],
      "position": 86,
      "scope": "query",
      "type": 4,
    },
  },
  "using": Set {
    {
      "names": [
        "is_unrolling",
      ],
      "position": 26,
      "scope": "variable",
      "type": 12,
    },
    {
      "names": [
        "unrolling_time",
      ],
      "position": 52,
      "scope": "variable",
      "type": 12,
    },
  },
}
`;

exports[`MolangSet - harvest 38. variable.use_rolled_up_model = variable.rolled_up_time >= 0.2083 && (variable.unrolling_time == 0.0 || variable.unrolling_time <= 1.25 ); 1`] = `
MolangSet {
  "assigned": Set {
    {
      "names": [
        "use_rolled_up_model",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
  },
  "cache": MolangSyntaxCache {
    "_data": Map {
      "variable.use_rolled_up_model = variable.rolled_up_time >= 0.2083 && (variable.unrolling_time == 0.0 || variable.unrolling_time <= 1.25 );" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "use_rolled_up_model",
            ],
            "position": 0,
            "scope": "variable",
            "type": 12,
          },
          "position": 29,
          "right": {
            "_processed": true,
            "left": {
              "_processed": true,
              "left": {
                "names": [
                  "rolled_up_time",
                ],
                "position": 31,
                "scope": "variable",
                "type": 12,
              },
              "operator": ">=",
              "position": 55,
              "right": {
                "position": 58,
                "type": 5,
                "value": "0.2083",
              },
              "type": 2,
            },
            "operator": "&&",
            "position": 65,
            "right": {
              "_processed": true,
              "left": {
                "_processed": true,
                "left": {
                  "names": [
                    "unrolling_time",
                  ],
                  "position": 69,
                  "scope": "variable",
                  "type": 12,
                },
                "operator": "==",
                "position": 93,
                "right": {
                  "position": 96,
                  "type": 5,
                  "value": "0.0",
                },
                "type": 2,
              },
              "operator": "||",
              "position": 100,
              "right": {
                "_processed": true,
                "left": {
                  "names": [
                    "unrolling_time",
                  ],
                  "position": 103,
                  "scope": "variable",
                  "type": 12,
                },
                "operator": "<=",
                "position": 127,
                "right": {
                  "position": 130,
                  "type": 5,
                  "value": "1.25",
                },
                "type": 2,
              },
              "type": 2,
            },
            "type": 2,
          },
          "type": 1,
        },
      ],
    },
  },
  "functions": Set {},
  "using": Set {
    {
      "names": [
        "rolled_up_time",
      ],
      "position": 31,
      "scope": "variable",
      "type": 12,
    },
    {
      "names": [
        "unrolling_time",
      ],
      "position": 69,
      "scope": "variable",
      "type": 12,
    },
    {
      "names": [
        "unrolling_time",
      ],
      "position": 103,
      "scope": "variable",
      "type": 12,
    },
  },
}
`;

exports[`MolangSet - harvest 39. variable.walk_anim_time_update = query.anim_time + math.min(3.0, math.lerp(2.0, 5.0, query.modified_move_speed)) * query.delta_time; 1`] = `
MolangSet {
  "assigned": Set {
    {
      "names": [
        "walk_anim_time_update",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
  },
  "cache": MolangSyntaxCache {
    "_data": Map {
      "variable.walk_anim_time_update = query.anim_time + math.min(3.0, math.lerp(2.0, 5.0, query.modified_move_speed)) * query.delta_time;" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "walk_anim_time_update",
            ],
            "position": 0,
            "scope": "variable",
            "type": 12,
          },
          "position": 31,
          "right": {
            "_processed": true,
            "left": {
              "arguments": [],
              "names": [
                "anim_time",
              ],
              "position": 33,
              "scope": "query",
              "type": 4,
            },
            "operator": "+",
            "position": 49,
            "right": {
              "_processed": true,
              "left": {
                "arguments": [
                  {
                    "position": 60,
                    "type": 5,
                    "value": "3.0",
                  },
                  {
                    "arguments": [
                      {
                        "position": 75,
                        "type": 5,
                        "value": "2.0",
                      },
                      {
                        "position": 80,
                        "type": 5,
                        "value": "5.0",
                      },
                      {
                        "arguments": [],
                        "names": [
                          "modified_move_speed",
                        ],
                        "position": 85,
                        "scope": "query",
                        "type": 4,
                      },
                    ],
                    "names": [
                      "lerp",
                    ],
                    "position": 65,
                    "scope": "math",
                    "type": 4,
                  },
                ],
                "names": [
                  "min",
                ],
                "position": 51,
                "scope": "math",
                "type": 4,
              },
              "operator": "*",
              "position": 113,
              "right": {
                "arguments": [],
                "names": [
                  "delta_time",
                ],
                "position": 115,
                "scope": "query",
                "type": 4,
              },
              "type": 2,
            },
            "type": 2,
          },
          "type": 1,
        },
      ],
    },
  },
  "functions": Set {
    {
      "arguments": [],
      "names": [
        "anim_time",
      ],
      "position": 33,
      "scope": "query",
      "type": 4,
    },
    {
      "arguments": [
        {
          "position": 60,
          "type": 5,
          "value": "3.0",
        },
        {
          "arguments": [
            {
              "position": 75,
              "type": 5,
              "value": "2.0",
            },
            {
              "position": 80,
              "type": 5,
              "value": "5.0",
            },
            {
              "arguments": [],
              "names": [
                "modified_move_speed",
              ],
              "position": 85,
              "scope": "query",
              "type": 4,
            },
          ],
          "names": [
            "lerp",
          ],
          "position": 65,
          "scope": "math",
          "type": 4,
        },
      ],
      "names": [
        "min",
      ],
      "position": 51,
      "scope": "math",
      "type": 4,
    },
    {
      "arguments": [],
      "names": [
        "delta_time",
      ],
      "position": 115,
      "scope": "query",
      "type": 4,
    },
    {
      "arguments": [
        {
          "position": 75,
          "type": 5,
          "value": "2.0",
        },
        {
          "position": 80,
          "type": 5,
          "value": "5.0",
        },
        {
          "arguments": [],
          "names": [
            "modified_move_speed",
          ],
          "position": 85,
          "scope": "query",
          "type": 4,
        },
      ],
      "names": [
        "lerp",
      ],
      "position": 65,
      "scope": "math",
      "type": 4,
    },
    {
      "arguments": [],
      "names": [
        "modified_move_speed",
      ],
      "position": 85,
      "scope": "query",
      "type": 4,
    },
  },
  "using": Set {},
}
`;

exports[`MolangSet - harvest 40. variable.walk_anim_time_update = query.anim_time + math.min(3.0, math.lerp(2.0, 5.0, query.modified_move_speed)) * query.delta_time;variable.y_head_rotation = math.clamp(query.target_y_rotation, -22.5, 25); 1`] = `
MolangSet {
  "assigned": Set {
    {
      "names": [
        "walk_anim_time_update",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
    {
      "names": [
        "y_head_rotation",
      ],
      "position": 132,
      "scope": "variable",
      "type": 12,
    },
  },
  "cache": MolangSyntaxCache {
    "_data": Map {
      "variable.walk_anim_time_update = query.anim_time + math.min(3.0, math.lerp(2.0, 5.0, query.modified_move_speed)) * query.delta_time;variable.y_head_rotation = math.clamp(query.target_y_rotation, -22.5, 25);" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "walk_anim_time_update",
            ],
            "position": 0,
            "scope": "variable",
            "type": 12,
          },
          "position": 31,
          "right": {
            "_processed": true,
            "left": {
              "arguments": [],
              "names": [
                "anim_time",
              ],
              "position": 33,
              "scope": "query",
              "type": 4,
            },
            "operator": "+",
            "position": 49,
            "right": {
              "_processed": true,
              "left": {
                "arguments": [
                  {
                    "position": 60,
                    "type": 5,
                    "value": "3.0",
                  },
                  {
                    "arguments": [
                      {
                        "position": 75,
                        "type": 5,
                        "value": "2.0",
                      },
                      {
                        "position": 80,
                        "type": 5,
                        "value": "5.0",
                      },
                      {
                        "arguments": [],
                        "names": [
                          "modified_move_speed",
                        ],
                        "position": 85,
                        "scope": "query",
                        "type": 4,
                      },
                    ],
                    "names": [
                      "lerp",
                    ],
                    "position": 65,
                    "scope": "math",
                    "type": 4,
                  },
                ],
                "names": [
                  "min",
                ],
                "position": 51,
                "scope": "math",
                "type": 4,
              },
              "operator": "*",
              "position": 113,
              "right": {
                "arguments": [],
                "names": [
                  "delta_time",
                ],
                "position": 115,
                "scope": "query",
                "type": 4,
              },
              "type": 2,
            },
            "type": 2,
          },
          "type": 1,
        },
        {
          "_processed": true,
          "left": {
            "names": [
              "y_head_rotation",
            ],
            "position": 132,
            "scope": "variable",
            "type": 12,
          },
          "position": 157,
          "right": {
            "arguments": [
              {
                "arguments": [],
                "names": [
                  "target_y_rotation",
                ],
                "position": 170,
                "scope": "query",
                "type": 4,
              },
              {
                "_processed": true,
                "operand": {
                  "position": 196,
                  "type": 5,
                  "value": "22.5",
                },
                "operator": "-",
                "position": 195,
                "type": 11,
              },
              {
                "position": 202,
                "type": 5,
                "value": "25",
              },
            ],
            "names": [
              "clamp",
            ],
            "position": 159,
            "scope": "math",
            "type": 4,
          },
          "type": 1,
        },
      ],
    },
  },
  "functions": Set {
    {
      "arguments": [],
      "names": [
        "anim_time",
      ],
      "position": 33,
      "scope": "query",
      "type": 4,
    },
    {
      "arguments": [
        {
          "position": 60,
          "type": 5,
          "value": "3.0",
        },
        {
          "arguments": [
            {
              "position": 75,
              "type": 5,
              "value": "2.0",
            },
            {
              "position": 80,
              "type": 5,
              "value": "5.0",
            },
            {
              "arguments": [],
              "names": [
                "modified_move_speed",
              ],
              "position": 85,
              "scope": "query",
              "type": 4,
            },
          ],
          "names": [
            "lerp",
          ],
          "position": 65,
          "scope": "math",
          "type": 4,
        },
      ],
      "names": [
        "min",
      ],
      "position": 51,
      "scope": "math",
      "type": 4,
    },
    {
      "arguments": [],
      "names": [
        "delta_time",
      ],
      "position": 115,
      "scope": "query",
      "type": 4,
    },
    {
      "arguments": [
        {
          "position": 75,
          "type": 5,
          "value": "2.0",
        },
        {
          "position": 80,
          "type": 5,
          "value": "5.0",
        },
        {
          "arguments": [],
          "names": [
            "modified_move_speed",
          ],
          "position": 85,
          "scope": "query",
          "type": 4,
        },
      ],
      "names": [
        "lerp",
      ],
      "position": 65,
      "scope": "math",
      "type": 4,
    },
    {
      "arguments": [],
      "names": [
        "modified_move_speed",
      ],
      "position": 85,
      "scope": "query",
      "type": 4,
    },
    {
      "arguments": [
        {
          "arguments": [],
          "names": [
            "target_y_rotation",
          ],
          "position": 170,
          "scope": "query",
          "type": 4,
        },
        {
          "_processed": true,
          "operand": {
            "position": 196,
            "type": 5,
            "value": "22.5",
          },
          "operator": "-",
          "position": 195,
          "type": 11,
        },
        {
          "position": 202,
          "type": 5,
          "value": "25",
        },
      ],
      "names": [
        "clamp",
      ],
      "position": 159,
      "scope": "math",
      "type": 4,
    },
    {
      "arguments": [],
      "names": [
        "target_y_rotation",
      ],
      "position": 170,
      "scope": "query",
      "type": 4,
    },
  },
  "using": Set {},
}
`;

exports[`MolangSet - harvest 41. variable.walking = query.modified_move_speed > 0.01 && !variable.is_rolled_up; 1`] = `
MolangSet {
  "assigned": Set {
    {
      "names": [
        "walking",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
  },
  "cache": MolangSyntaxCache {
    "_data": Map {
      "variable.walking = query.modified_move_speed > 0.01 && !variable.is_rolled_up;" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "walking",
            ],
            "position": 0,
            "scope": "variable",
            "type": 12,
          },
          "position": 17,
          "right": {
            "_processed": true,
            "left": {
              "_processed": true,
              "left": {
                "arguments": [],
                "names": [
                  "modified_move_speed",
                ],
                "position": 19,
                "scope": "query",
                "type": 4,
              },
              "operator": ">",
              "position": 45,
              "right": {
                "position": 47,
                "type": 5,
                "value": "0.01",
              },
              "type": 2,
            },
            "operator": "&&",
            "position": 52,
            "right": {
              "_processed": true,
              "operand": {
                "names": [
                  "is_rolled_up",
                ],
                "position": 56,
                "scope": "variable",
                "type": 12,
              },
              "operator": "!",
              "position": 55,
              "type": 11,
            },
            "type": 2,
          },
          "type": 1,
        },
      ],
    },
  },
  "functions": Set {
    {
      "arguments": [],
      "names": [
        "modified_move_speed",
      ],
      "position": 19,
      "scope": "query",
      "type": 4,
    },
  },
  "using": Set {
    {
      "names": [
        "is_rolled_up",
      ],
      "position": 56,
      "scope": "variable",
      "type": 12,
    },
  },
}
`;

exports[`MolangSet - harvest 42. variable.x_head_rotation = math.clamp(query.target_x_rotation, -32.5, 32.5); 1`] = `
MolangSet {
  "assigned": Set {
    {
      "names": [
        "x_head_rotation",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
  },
  "cache": MolangSyntaxCache {
    "_data": Map {
      "variable.x_head_rotation = math.clamp(query.target_x_rotation, -32.5, 32.5);" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "x_head_rotation",
            ],
            "position": 0,
            "scope": "variable",
            "type": 12,
          },
          "position": 25,
          "right": {
            "arguments": [
              {
                "arguments": [],
                "names": [
                  "target_x_rotation",
                ],
                "position": 38,
                "scope": "query",
                "type": 4,
              },
              {
                "_processed": true,
                "operand": {
                  "position": 64,
                  "type": 5,
                  "value": "32.5",
                },
                "operator": "-",
                "position": 63,
                "type": 11,
              },
              {
                "position": 70,
                "type": 5,
                "value": "32.5",
              },
            ],
            "names": [
              "clamp",
            ],
            "position": 27,
            "scope": "math",
            "type": 4,
          },
          "type": 1,
        },
      ],
    },
  },
  "functions": Set {
    {
      "arguments": [
        {
          "arguments": [],
          "names": [
            "target_x_rotation",
          ],
          "position": 38,
          "scope": "query",
          "type": 4,
        },
        {
          "_processed": true,
          "operand": {
            "position": 64,
            "type": 5,
            "value": "32.5",
          },
          "operator": "-",
          "position": 63,
          "type": 11,
        },
        {
          "position": 70,
          "type": 5,
          "value": "32.5",
        },
      ],
      "names": [
        "clamp",
      ],
      "position": 27,
      "scope": "math",
      "type": 4,
    },
    {
      "arguments": [],
      "names": [
        "target_x_rotation",
      ],
      "position": 38,
      "scope": "query",
      "type": 4,
    },
  },
  "using": Set {},
}
`;

exports[`MolangSet - harvest 43. variable.x_head_rotation = math.clamp(query.target_x_rotation, -32.5, 32.5); 1`] = `
MolangSet {
  "assigned": Set {
    {
      "names": [
        "x_head_rotation",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
  },
  "cache": MolangSyntaxCache {
    "_data": Map {
      "variable.x_head_rotation = math.clamp(query.target_x_rotation, -32.5, 32.5);" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "x_head_rotation",
            ],
            "position": 0,
            "scope": "variable",
            "type": 12,
          },
          "position": 25,
          "right": {
            "arguments": [
              {
                "arguments": [],
                "names": [
                  "target_x_rotation",
                ],
                "position": 38,
                "scope": "query",
                "type": 4,
              },
              {
                "_processed": true,
                "operand": {
                  "position": 64,
                  "type": 5,
                  "value": "32.5",
                },
                "operator": "-",
                "position": 63,
                "type": 11,
              },
              {
                "position": 70,
                "type": 5,
                "value": "32.5",
              },
            ],
            "names": [
              "clamp",
            ],
            "position": 27,
            "scope": "math",
            "type": 4,
          },
          "type": 1,
        },
      ],
    },
  },
  "functions": Set {
    {
      "arguments": [
        {
          "arguments": [],
          "names": [
            "target_x_rotation",
          ],
          "position": 38,
          "scope": "query",
          "type": 4,
        },
        {
          "_processed": true,
          "operand": {
            "position": 64,
            "type": 5,
            "value": "32.5",
          },
          "operator": "-",
          "position": 63,
          "type": 11,
        },
        {
          "position": 70,
          "type": 5,
          "value": "32.5",
        },
      ],
      "names": [
        "clamp",
      ],
      "position": 27,
      "scope": "math",
      "type": 4,
    },
    {
      "arguments": [],
      "names": [
        "target_x_rotation",
      ],
      "position": 38,
      "scope": "query",
      "type": 4,
    },
  },
  "using": Set {},
}
`;

exports[`MolangSet - harvest 44. variable.x_head_rotation = query.target_x_rotation * 32.5; 1`] = `
MolangSet {
  "assigned": Set {
    {
      "names": [
        "x_head_rotation",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
  },
  "cache": MolangSyntaxCache {
    "_data": Map {
      "variable.x_head_rotation = query.target_x_rotation * 32.5;" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "x_head_rotation",
            ],
            "position": 0,
            "scope": "variable",
            "type": 12,
          },
          "position": 25,
          "right": {
            "_processed": true,
            "left": {
              "arguments": [],
              "names": [
                "target_x_rotation",
              ],
              "position": 27,
              "scope": "query",
              "type": 4,
            },
            "operator": "*",
            "position": 51,
            "right": {
              "position": 53,
              "type": 5,
              "value": "32.5",
            },
            "type": 2,
          },
          "type": 1,
        },
      ],
    },
  },
  "functions": Set {
    {
      "arguments": [],
      "names": [
        "target_x_rotation",
      ],
      "position": 27,
      "scope": "query",
      "type": 4,
    },
  },
  "using": Set {},
}
`;

exports[`MolangSet - harvest 45. variable.y_head_rotation = math.clamp(query.target_y_rotation, -22.5, 25); 1`] = `
MolangSet {
  "assigned": Set {
    {
      "names": [
        "y_head_rotation",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
  },
  "cache": MolangSyntaxCache {
    "_data": Map {
      "variable.y_head_rotation = math.clamp(query.target_y_rotation, -22.5, 25);" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "y_head_rotation",
            ],
            "position": 0,
            "scope": "variable",
            "type": 12,
          },
          "position": 25,
          "right": {
            "arguments": [
              {
                "arguments": [],
                "names": [
                  "target_y_rotation",
                ],
                "position": 38,
                "scope": "query",
                "type": 4,
              },
              {
                "_processed": true,
                "operand": {
                  "position": 64,
                  "type": 5,
                  "value": "22.5",
                },
                "operator": "-",
                "position": 63,
                "type": 11,
              },
              {
                "position": 70,
                "type": 5,
                "value": "25",
              },
            ],
            "names": [
              "clamp",
            ],
            "position": 27,
            "scope": "math",
            "type": 4,
          },
          "type": 1,
        },
      ],
    },
  },
  "functions": Set {
    {
      "arguments": [
        {
          "arguments": [],
          "names": [
            "target_y_rotation",
          ],
          "position": 38,
          "scope": "query",
          "type": 4,
        },
        {
          "_processed": true,
          "operand": {
            "position": 64,
            "type": 5,
            "value": "22.5",
          },
          "operator": "-",
          "position": 63,
          "type": 11,
        },
        {
          "position": 70,
          "type": 5,
          "value": "25",
        },
      ],
      "names": [
        "clamp",
      ],
      "position": 27,
      "scope": "math",
      "type": 4,
    },
    {
      "arguments": [],
      "names": [
        "target_y_rotation",
      ],
      "position": 38,
      "scope": "query",
      "type": 4,
    },
  },
  "using": Set {},
}
`;

exports[`MolangSet - harvest 46. variable.y_head_rotation = math.clamp(query.target_y_rotation, -22.5, 25); 1`] = `
MolangSet {
  "assigned": Set {
    {
      "names": [
        "y_head_rotation",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
  },
  "cache": MolangSyntaxCache {
    "_data": Map {
      "variable.y_head_rotation = math.clamp(query.target_y_rotation, -22.5, 25);" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "y_head_rotation",
            ],
            "position": 0,
            "scope": "variable",
            "type": 12,
          },
          "position": 25,
          "right": {
            "arguments": [
              {
                "arguments": [],
                "names": [
                  "target_y_rotation",
                ],
                "position": 38,
                "scope": "query",
                "type": 4,
              },
              {
                "_processed": true,
                "operand": {
                  "position": 64,
                  "type": 5,
                  "value": "22.5",
                },
                "operator": "-",
                "position": 63,
                "type": 11,
              },
              {
                "position": 70,
                "type": 5,
                "value": "25",
              },
            ],
            "names": [
              "clamp",
            ],
            "position": 27,
            "scope": "math",
            "type": 4,
          },
          "type": 1,
        },
      ],
    },
  },
  "functions": Set {
    {
      "arguments": [
        {
          "arguments": [],
          "names": [
            "target_y_rotation",
          ],
          "position": 38,
          "scope": "query",
          "type": 4,
        },
        {
          "_processed": true,
          "operand": {
            "position": 64,
            "type": 5,
            "value": "22.5",
          },
          "operator": "-",
          "position": 63,
          "type": 11,
        },
        {
          "position": 70,
          "type": 5,
          "value": "25",
        },
      ],
      "names": [
        "clamp",
      ],
      "position": 27,
      "scope": "math",
      "type": 4,
    },
    {
      "arguments": [],
      "names": [
        "target_y_rotation",
      ],
      "position": 38,
      "scope": "query",
      "type": 4,
    },
  },
  "using": Set {},
}
`;

exports[`MolangSet - harvest 50. variable.rolled_up_time = variable.is_rolled_up ? ((variable.rolled_up_time ?? 0.0) + q.delta_time) : 0.0; 1`] = `
MolangSet {
  "assigned": Set {
    {
      "names": [
        "rolled_up_time",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
  },
  "cache": MolangSyntaxCache {
    "_data": Map {
      "variable.rolled_up_time = variable.is_rolled_up ? ((variable.rolled_up_time ?? 0.0) + q.delta_time) : 0.0;" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "rolled_up_time",
            ],
            "position": 0,
            "scope": "variable",
            "type": 12,
          },
          "position": 24,
          "right": {
            "_processed": true,
            "condition": {
              "names": [
                "is_rolled_up",
              ],
              "position": 26,
              "scope": "variable",
              "type": 12,
            },
            "falseExpression": {
              "position": 102,
              "type": 5,
              "value": "0.0",
            },
            "position": 48,
            "trueExpression": {
              "_processed": true,
              "left": {
                "_processed": true,
                "left": {
                  "names": [
                    "rolled_up_time",
                  ],
                  "position": 52,
                  "scope": "variable",
                  "type": 12,
                },
                "position": 76,
                "right": {
                  "position": 79,
                  "type": 5,
                  "value": "0.0",
                },
                "type": 7,
              },
              "operator": "+",
              "position": 84,
              "right": {
                "arguments": [],
                "names": [
                  "delta_time",
                ],
                "position": 86,
                "scope": "q",
                "type": 4,
              },
              "type": 2,
            },
            "type": 3,
          },
          "type": 1,
        },
      ],
    },
  },
  "functions": Set {
    {
      "arguments": [],
      "names": [
        "delta_time",
      ],
      "position": 86,
      "scope": "q",
      "type": 4,
    },
  },
  "using": Set {
    {
      "names": [
        "is_rolled_up",
      ],
      "position": 26,
      "scope": "variable",
      "type": 12,
    },
    {
      "names": [
        "rolled_up_time",
      ],
      "position": 52,
      "scope": "variable",
      "type": 12,
    },
  },
}
`;

exports[`MolangSet - harvest 51. variable.unrolling_time = variable.is_unrolling ? ((variable.unrolling_time ?? 0.0) + q.delta_time) : 0.0; 1`] = `
MolangSet {
  "assigned": Set {
    {
      "names": [
        "unrolling_time",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
  },
  "cache": MolangSyntaxCache {
    "_data": Map {
      "variable.unrolling_time = variable.is_unrolling ? ((variable.unrolling_time ?? 0.0) + q.delta_time) : 0.0;" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "unrolling_time",
            ],
            "position": 0,
            "scope": "variable",
            "type": 12,
          },
          "position": 24,
          "right": {
            "_processed": true,
            "condition": {
              "names": [
                "is_unrolling",
              ],
              "position": 26,
              "scope": "variable",
              "type": 12,
            },
            "falseExpression": {
              "position": 102,
              "type": 5,
              "value": "0.0",
            },
            "position": 48,
            "trueExpression": {
              "_processed": true,
              "left": {
                "_processed": true,
                "left": {
                  "names": [
                    "unrolling_time",
                  ],
                  "position": 52,
                  "scope": "variable",
                  "type": 12,
                },
                "position": 76,
                "right": {
                  "position": 79,
                  "type": 5,
                  "value": "0.0",
                },
                "type": 7,
              },
              "operator": "+",
              "position": 84,
              "right": {
                "arguments": [],
                "names": [
                  "delta_time",
                ],
                "position": 86,
                "scope": "q",
                "type": 4,
              },
              "type": 2,
            },
            "type": 3,
          },
          "type": 1,
        },
      ],
    },
  },
  "functions": Set {
    {
      "arguments": [],
      "names": [
        "delta_time",
      ],
      "position": 86,
      "scope": "q",
      "type": 4,
    },
  },
  "using": Set {
    {
      "names": [
        "is_unrolling",
      ],
      "position": 26,
      "scope": "variable",
      "type": 12,
    },
    {
      "names": [
        "unrolling_time",
      ],
      "position": 52,
      "scope": "variable",
      "type": 12,
    },
  },
}
`;

exports[`MolangSet - harvest 52. variable.walk_anim_time_update = q.anim_time + math.min(3.0, math.lerp(2.0, 5.0, q.modified_move_speed)) * q.delta_time; 1`] = `
MolangSet {
  "assigned": Set {
    {
      "names": [
        "walk_anim_time_update",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
  },
  "cache": MolangSyntaxCache {
    "_data": Map {
      "variable.walk_anim_time_update = q.anim_time + math.min(3.0, math.lerp(2.0, 5.0, q.modified_move_speed)) * q.delta_time;" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "walk_anim_time_update",
            ],
            "position": 0,
            "scope": "variable",
            "type": 12,
          },
          "position": 31,
          "right": {
            "_processed": true,
            "left": {
              "arguments": [],
              "names": [
                "anim_time",
              ],
              "position": 33,
              "scope": "q",
              "type": 4,
            },
            "operator": "+",
            "position": 45,
            "right": {
              "_processed": true,
              "left": {
                "arguments": [
                  {
                    "position": 56,
                    "type": 5,
                    "value": "3.0",
                  },
                  {
                    "arguments": [
                      {
                        "position": 71,
                        "type": 5,
                        "value": "2.0",
                      },
                      {
                        "position": 76,
                        "type": 5,
                        "value": "5.0",
                      },
                      {
                        "arguments": [],
                        "names": [
                          "modified_move_speed",
                        ],
                        "position": 81,
                        "scope": "q",
                        "type": 4,
                      },
                    ],
                    "names": [
                      "lerp",
                    ],
                    "position": 61,
                    "scope": "math",
                    "type": 4,
                  },
                ],
                "names": [
                  "min",
                ],
                "position": 47,
                "scope": "math",
                "type": 4,
              },
              "operator": "*",
              "position": 105,
              "right": {
                "arguments": [],
                "names": [
                  "delta_time",
                ],
                "position": 107,
                "scope": "q",
                "type": 4,
              },
              "type": 2,
            },
            "type": 2,
          },
          "type": 1,
        },
      ],
    },
  },
  "functions": Set {
    {
      "arguments": [],
      "names": [
        "anim_time",
      ],
      "position": 33,
      "scope": "q",
      "type": 4,
    },
    {
      "arguments": [
        {
          "position": 56,
          "type": 5,
          "value": "3.0",
        },
        {
          "arguments": [
            {
              "position": 71,
              "type": 5,
              "value": "2.0",
            },
            {
              "position": 76,
              "type": 5,
              "value": "5.0",
            },
            {
              "arguments": [],
              "names": [
                "modified_move_speed",
              ],
              "position": 81,
              "scope": "q",
              "type": 4,
            },
          ],
          "names": [
            "lerp",
          ],
          "position": 61,
          "scope": "math",
          "type": 4,
        },
      ],
      "names": [
        "min",
      ],
      "position": 47,
      "scope": "math",
      "type": 4,
    },
    {
      "arguments": [],
      "names": [
        "delta_time",
      ],
      "position": 107,
      "scope": "q",
      "type": 4,
    },
    {
      "arguments": [
        {
          "position": 71,
          "type": 5,
          "value": "2.0",
        },
        {
          "position": 76,
          "type": 5,
          "value": "5.0",
        },
        {
          "arguments": [],
          "names": [
            "modified_move_speed",
          ],
          "position": 81,
          "scope": "q",
          "type": 4,
        },
      ],
      "names": [
        "lerp",
      ],
      "position": 61,
      "scope": "math",
      "type": 4,
    },
    {
      "arguments": [],
      "names": [
        "modified_move_speed",
      ],
      "position": 81,
      "scope": "q",
      "type": 4,
    },
  },
  "using": Set {},
}
`;

exports[`MolangSet - harvest 53. variable.walk_anim_time_update = q.anim_time + math.min(3.0, math.lerp(2.0, 5.0, q.modified_move_speed)) * q.delta_time;variable.y_head_rotation = math.clamp(q.target_y_rotation, -22.5, 25); 1`] = `
MolangSet {
  "assigned": Set {
    {
      "names": [
        "walk_anim_time_update",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
    {
      "names": [
        "y_head_rotation",
      ],
      "position": 120,
      "scope": "variable",
      "type": 12,
    },
  },
  "cache": MolangSyntaxCache {
    "_data": Map {
      "variable.walk_anim_time_update = q.anim_time + math.min(3.0, math.lerp(2.0, 5.0, q.modified_move_speed)) * q.delta_time;variable.y_head_rotation = math.clamp(q.target_y_rotation, -22.5, 25);" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "walk_anim_time_update",
            ],
            "position": 0,
            "scope": "variable",
            "type": 12,
          },
          "position": 31,
          "right": {
            "_processed": true,
            "left": {
              "arguments": [],
              "names": [
                "anim_time",
              ],
              "position": 33,
              "scope": "q",
              "type": 4,
            },
            "operator": "+",
            "position": 45,
            "right": {
              "_processed": true,
              "left": {
                "arguments": [
                  {
                    "position": 56,
                    "type": 5,
                    "value": "3.0",
                  },
                  {
                    "arguments": [
                      {
                        "position": 71,
                        "type": 5,
                        "value": "2.0",
                      },
                      {
                        "position": 76,
                        "type": 5,
                        "value": "5.0",
                      },
                      {
                        "arguments": [],
                        "names": [
                          "modified_move_speed",
                        ],
                        "position": 81,
                        "scope": "q",
                        "type": 4,
                      },
                    ],
                    "names": [
                      "lerp",
                    ],
                    "position": 61,
                    "scope": "math",
                    "type": 4,
                  },
                ],
                "names": [
                  "min",
                ],
                "position": 47,
                "scope": "math",
                "type": 4,
              },
              "operator": "*",
              "position": 105,
              "right": {
                "arguments": [],
                "names": [
                  "delta_time",
                ],
                "position": 107,
                "scope": "q",
                "type": 4,
              },
              "type": 2,
            },
            "type": 2,
          },
          "type": 1,
        },
        {
          "_processed": true,
          "left": {
            "names": [
              "y_head_rotation",
            ],
            "position": 120,
            "scope": "variable",
            "type": 12,
          },
          "position": 145,
          "right": {
            "arguments": [
              {
                "arguments": [],
                "names": [
                  "target_y_rotation",
                ],
                "position": 158,
                "scope": "q",
                "type": 4,
              },
              {
                "_processed": true,
                "operand": {
                  "position": 180,
                  "type": 5,
                  "value": "22.5",
                },
                "operator": "-",
                "position": 179,
                "type": 11,
              },
              {
                "position": 186,
                "type": 5,
                "value": "25",
              },
            ],
            "names": [
              "clamp",
            ],
            "position": 147,
            "scope": "math",
            "type": 4,
          },
          "type": 1,
        },
      ],
    },
  },
  "functions": Set {
    {
      "arguments": [],
      "names": [
        "anim_time",
      ],
      "position": 33,
      "scope": "q",
      "type": 4,
    },
    {
      "arguments": [
        {
          "position": 56,
          "type": 5,
          "value": "3.0",
        },
        {
          "arguments": [
            {
              "position": 71,
              "type": 5,
              "value": "2.0",
            },
            {
              "position": 76,
              "type": 5,
              "value": "5.0",
            },
            {
              "arguments": [],
              "names": [
                "modified_move_speed",
              ],
              "position": 81,
              "scope": "q",
              "type": 4,
            },
          ],
          "names": [
            "lerp",
          ],
          "position": 61,
          "scope": "math",
          "type": 4,
        },
      ],
      "names": [
        "min",
      ],
      "position": 47,
      "scope": "math",
      "type": 4,
    },
    {
      "arguments": [],
      "names": [
        "delta_time",
      ],
      "position": 107,
      "scope": "q",
      "type": 4,
    },
    {
      "arguments": [
        {
          "position": 71,
          "type": 5,
          "value": "2.0",
        },
        {
          "position": 76,
          "type": 5,
          "value": "5.0",
        },
        {
          "arguments": [],
          "names": [
            "modified_move_speed",
          ],
          "position": 81,
          "scope": "q",
          "type": 4,
        },
      ],
      "names": [
        "lerp",
      ],
      "position": 61,
      "scope": "math",
      "type": 4,
    },
    {
      "arguments": [],
      "names": [
        "modified_move_speed",
      ],
      "position": 81,
      "scope": "q",
      "type": 4,
    },
    {
      "arguments": [
        {
          "arguments": [],
          "names": [
            "target_y_rotation",
          ],
          "position": 158,
          "scope": "q",
          "type": 4,
        },
        {
          "_processed": true,
          "operand": {
            "position": 180,
            "type": 5,
            "value": "22.5",
          },
          "operator": "-",
          "position": 179,
          "type": 11,
        },
        {
          "position": 186,
          "type": 5,
          "value": "25",
        },
      ],
      "names": [
        "clamp",
      ],
      "position": 147,
      "scope": "math",
      "type": 4,
    },
    {
      "arguments": [],
      "names": [
        "target_y_rotation",
      ],
      "position": 158,
      "scope": "q",
      "type": 4,
    },
  },
  "using": Set {},
}
`;

exports[`MolangSet - harvest 54. variable.walking = q.modified_move_speed > 0.01 && !variable.is_rolled_up; 1`] = `
MolangSet {
  "assigned": Set {
    {
      "names": [
        "walking",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
  },
  "cache": MolangSyntaxCache {
    "_data": Map {
      "variable.walking = q.modified_move_speed > 0.01 && !variable.is_rolled_up;" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "walking",
            ],
            "position": 0,
            "scope": "variable",
            "type": 12,
          },
          "position": 17,
          "right": {
            "_processed": true,
            "left": {
              "_processed": true,
              "left": {
                "arguments": [],
                "names": [
                  "modified_move_speed",
                ],
                "position": 19,
                "scope": "q",
                "type": 4,
              },
              "operator": ">",
              "position": 41,
              "right": {
                "position": 43,
                "type": 5,
                "value": "0.01",
              },
              "type": 2,
            },
            "operator": "&&",
            "position": 48,
            "right": {
              "_processed": true,
              "operand": {
                "names": [
                  "is_rolled_up",
                ],
                "position": 52,
                "scope": "variable",
                "type": 12,
              },
              "operator": "!",
              "position": 51,
              "type": 11,
            },
            "type": 2,
          },
          "type": 1,
        },
      ],
    },
  },
  "functions": Set {
    {
      "arguments": [],
      "names": [
        "modified_move_speed",
      ],
      "position": 19,
      "scope": "q",
      "type": 4,
    },
  },
  "using": Set {
    {
      "names": [
        "is_rolled_up",
      ],
      "position": 52,
      "scope": "variable",
      "type": 12,
    },
  },
}
`;

exports[`MolangSet - harvest 55. variable.state = variable.is_rolled_up ? 1 : 0; 1`] = `
MolangSet {
  "assigned": Set {
    {
      "names": [
        "state",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
  },
  "cache": MolangSyntaxCache {
    "_data": Map {
      "variable.state = variable.is_rolled_up ? 1 : 0;" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "state",
            ],
            "position": 0,
            "scope": "variable",
            "type": 12,
          },
          "position": 15,
          "right": {
            "_processed": true,
            "condition": {
              "names": [
                "is_rolled_up",
              ],
              "position": 17,
              "scope": "variable",
              "type": 12,
            },
            "falseExpression": {
              "position": 45,
              "type": 5,
              "value": "0",
            },
            "position": 39,
            "trueExpression": {
              "position": 41,
              "type": 5,
              "value": "1",
            },
            "type": 3,
          },
          "type": 1,
        },
      ],
    },
  },
  "functions": Set {},
  "using": Set {
    {
      "names": [
        "is_rolled_up",
      ],
      "position": 17,
      "scope": "variable",
      "type": 12,
    },
  },
}
`;

exports[`MolangSet - harvest 56. variable.state = variable.is_rolled_up ? 2 * (5 + variable.state) : 3 * 1 + variable.foo; 1`] = `
MolangSet {
  "assigned": Set {
    {
      "names": [
        "state",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
  },
  "cache": MolangSyntaxCache {
    "_data": Map {
      "variable.state = variable.is_rolled_up ? 2 * (5 + variable.state) : 3 * 1 + variable.foo;" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "state",
            ],
            "position": 0,
            "scope": "variable",
            "type": 12,
          },
          "position": 15,
          "right": {
            "_processed": true,
            "condition": {
              "names": [
                "is_rolled_up",
              ],
              "position": 17,
              "scope": "variable",
              "type": 12,
            },
            "falseExpression": {
              "_processed": true,
              "left": {
                "_processed": true,
                "left": {
                  "position": 68,
                  "type": 5,
                  "value": "3",
                },
                "operator": "*",
                "position": 70,
                "right": {
                  "position": 72,
                  "type": 5,
                  "value": "1",
                },
                "type": 2,
              },
              "operator": "+",
              "position": 74,
              "right": {
                "names": [
                  "foo",
                ],
                "position": 76,
                "scope": "variable",
                "type": 12,
              },
              "type": 2,
            },
            "position": 39,
            "trueExpression": {
              "_processed": true,
              "left": {
                "position": 41,
                "type": 5,
                "value": "2",
              },
              "operator": "*",
              "position": 43,
              "right": {
                "_processed": true,
                "left": {
                  "position": 46,
                  "type": 5,
                  "value": "5",
                },
                "operator": "+",
                "position": 48,
                "right": {
                  "names": [
                    "state",
                  ],
                  "position": 50,
                  "scope": "variable",
                  "type": 12,
                },
                "type": 2,
              },
              "type": 2,
            },
            "type": 3,
          },
          "type": 1,
        },
      ],
    },
  },
  "functions": Set {},
  "using": Set {
    {
      "names": [
        "is_rolled_up",
      ],
      "position": 17,
      "scope": "variable",
      "type": 12,
    },
    {
      "names": [
        "foo",
      ],
      "position": 76,
      "scope": "variable",
      "type": 12,
    },
    {
      "names": [
        "state",
      ],
      "position": 50,
      "scope": "variable",
      "type": 12,
    },
  },
}
`;

exports[`MolangSet - harvest 57. variable.state = variable.is_rolled_up ? variable.rolled_up_time >= 0.2083 ? 1 : 2 : 3; 1`] = `
MolangSet {
  "assigned": Set {
    {
      "names": [
        "state",
      ],
      "position": 0,
      "scope": "variable",
      "type": 12,
    },
  },
  "cache": MolangSyntaxCache {
    "_data": Map {
      "variable.state = variable.is_rolled_up ? variable.rolled_up_time >= 0.2083 ? 1 : 2 : 3;" => [
        {
          "_processed": true,
          "left": {
            "names": [
              "state",
            ],
            "position": 0,
            "scope": "variable",
            "type": 12,
          },
          "position": 15,
          "right": {
            "_processed": true,
            "condition": {
              "names": [
                "is_rolled_up",
              ],
              "position": 17,
              "scope": "variable",
              "type": 12,
            },
            "falseExpression": {
              "position": 85,
              "type": 5,
              "value": "3",
            },
            "position": 39,
            "trueExpression": {
              "_processed": true,
              "condition": {
                "_processed": true,
                "left": {
                  "names": [
                    "rolled_up_time",
                  ],
                  "position": 41,
                  "scope": "variable",
                  "type": 12,
                },
                "operator": ">=",
                "position": 65,
                "right": {
                  "position": 68,
                  "type": 5,
                  "value": "0.2083",
                },
                "type": 2,
              },
              "falseExpression": {
                "position": 81,
                "type": 5,
                "value": "2",
              },
              "position": 75,
              "trueExpression": {
                "position": 77,
                "type": 5,
                "value": "1",
              },
              "type": 3,
            },
            "type": 3,
          },
          "type": 1,
        },
      ],
    },
  },
  "functions": Set {},
  "using": Set {
    {
      "names": [
        "is_rolled_up",
      ],
      "position": 17,
      "scope": "variable",
      "type": 12,
    },
    {
      "names": [
        "rolled_up_time",
      ],
      "position": 41,
      "scope": "variable",
      "type": 12,
    },
  },
}
`;
