// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`molang - mermaid - graphs should be able to generate stage diagrams 0. variable.agent.anim_state == 2 1`] = `
"flowchart LR
    node0{"\\==@26"}
    node1[["variable.agent.anim_state@0"]]
    node2["2@29"]
    node0 -->|left| node1
    node0 -->|right| node2"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 1. variable.agent.anim_state > 2 1`] = `
"flowchart LR
    node0{"\\>@26"}
    node1[["variable.agent.anim_state@0"]]
    node2["2@28"]
    node0 -->|left| node1
    node0 -->|right| node2"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 2. variable.agent.anim_state < 2 1`] = `
"flowchart LR
    node0{"\\<@26"}
    node1[["variable.agent.anim_state@0"]]
    node2["2@28"]
    node0 -->|left| node1
    node0 -->|right| node2"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 3. variable.agent.anim_state != 2 1`] = `
"flowchart LR
    node0{"\\!=@26"}
    node1[["variable.agent.anim_state@0"]]
    node2["2@29"]
    node0 -->|left| node1
    node0 -->|right| node2"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 4. variable.agent.anim_state >= 2 1`] = `
"flowchart LR
    node0{"\\>=@26"}
    node1[["variable.agent.anim_state@0"]]
    node2["2@29"]
    node0 -->|left| node1
    node0 -->|right| node2"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 5. variable.agent.anim_state <= 2 1`] = `
"flowchart LR
    node0{"\\<=@26"}
    node1[["variable.agent.anim_state@0"]]
    node2["2@29"]
    node0 -->|left| node1
    node0 -->|right| node2"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 6. !variable.swaying && query.all_animations_finished 1`] = `
"flowchart LR
    node0{"\\&&@18"}
    node1{"!@0"}
    node2[["variable.swaying@1"]]
    node3{{"query.all_animations_finished()@21"}}
    node1 -->|operand| node2
    node0 -->|left| node1
    node0 -->|right| node3"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 7. v.agent.anim_state == 2 1`] = `
"flowchart LR
    node0{"\\==@19"}
    node1[["v.agent.anim_state@0"]]
    node2["2@22"]
    node0 -->|left| node1
    node0 -->|right| node2"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 8. v.agent.anim_state > 2 1`] = `
"flowchart LR
    node0{"\\>@19"}
    node1[["v.agent.anim_state@0"]]
    node2["2@21"]
    node0 -->|left| node1
    node0 -->|right| node2"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 9. v.agent.anim_state < 2 1`] = `
"flowchart LR
    node0{"\\<@19"}
    node1[["v.agent.anim_state@0"]]
    node2["2@21"]
    node0 -->|left| node1
    node0 -->|right| node2"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 10. v.agent.anim_state != 2 1`] = `
"flowchart LR
    node0{"\\!=@19"}
    node1[["v.agent.anim_state@0"]]
    node2["2@22"]
    node0 -->|left| node1
    node0 -->|right| node2"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 11. v.agent.anim_state >= 2 1`] = `
"flowchart LR
    node0{"\\>=@19"}
    node1[["v.agent.anim_state@0"]]
    node2["2@22"]
    node0 -->|left| node1
    node0 -->|right| node2"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 12. v.agent.anim_state <= 2 1`] = `
"flowchart LR
    node0{"\\<=@19"}
    node1[["v.agent.anim_state@0"]]
    node2["2@22"]
    node0 -->|left| node1
    node0 -->|right| node2"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 13. !v.swaying && q.all_animations_finished 1`] = `
"flowchart LR
    node0{"\\&&@11"}
    node1{"!@0"}
    node2[["v.swaying@1"]]
    node3{{"q.all_animations_finished()@14"}}
    node1 -->|operand| node2
    node0 -->|left| node1
    node0 -->|right| node3"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 14. 1.5 - math.pow(1.5, 1.0 - 015.0 * query.modified_move_speed) * query.camera_rotation(0) 1`] = `
"flowchart LR
    node0{"\\*@61"}
    node1{"\\-@4"}
    node2["1.5@0"]
    node3{{"math.pow()@6"}}
    node4["1.5@15"]
    node5{"\\*@32"}
    node6{"\\-@24"}
    node7["1.0@20"]
    node8["015.0@26"]
    node9{{"query.modified_move_speed()@34"}}
    node10{{"query.camera_rotation()@63"}}
    node11["0@85"]
    node1 -->|left| node2
    node3 -->|arg0| node4
    node6 -->|left| node7
    node6 -->|right| node8
    node5 -->|left| node6
    node5 -->|right| node9
    node3 -->|arg1| node5
    node1 -->|right| node3
    node0 -->|left| node1
    node10 -->|arg0| node11
    node0 -->|right| node10"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 15. math.clamp(math.sqrt(math.pow(query.position_delta(0), 2.0) + math.pow(query.position_delta(2), 2.0)), 0.0, 0.1) 1`] = `
"flowchart LR
    node0{{"math.clamp()@0"}}
    node1{{"math.sqrt()@11"}}
    node2{"\\+@60"}
    node3{{"math.pow()@21"}}
    node4{{"query.position_delta()@30"}}
    node5["0@51"]
    node6["2.0@55"]
    node7{{"math.pow()@62"}}
    node8{{"query.position_delta()@71"}}
    node9["2@92"]
    node10["2.0@96"]
    node11["0.0@103"]
    node12["0.1@108"]
    node4 -->|arg0| node5
    node3 -->|arg0| node4
    node3 -->|arg1| node6
    node2 -->|left| node3
    node8 -->|arg0| node9
    node7 -->|arg0| node8
    node7 -->|arg1| node10
    node2 -->|right| node7
    node1 -->|arg0| node2
    node0 -->|arg0| node1
    node0 -->|arg1| node11
    node0 -->|arg2| node12"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 16. -175 * math.sin(variable.attack_time * 180) 1`] = `
"flowchart LR
    node0{"\\*@5"}
    node1{"-@0"}
    node2["175@1"]
    node3{{"math.sin()@7"}}
    node4{"\\*@37"}
    node5[["variable.attack_time@16"]]
    node6["180@39"]
    node1 -->|operand| node2
    node0 -->|left| node1
    node4 -->|left| node5
    node4 -->|right| node6
    node3 -->|arg0| node4
    node0 -->|right| node3"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 17. math.sin(variable.attack_time * 180) * -175 1`] = `
"flowchart LR
    node0{"\\*@37"}
    node1{{"math.sin()@0"}}
    node2{"\\*@30"}
    node3[["variable.attack_time@9"]]
    node4["180@32"]
    node5{"-@39"}
    node6["175@40"]
    node2 -->|left| node3
    node2 -->|right| node4
    node1 -->|arg0| node2
    node0 -->|left| node1
    node5 -->|operand| node6
    node0 -->|right| node5"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 18. -5.0 * Math.cos(297.9380535 * query.anim_time) - 5.0 1`] = `
"flowchart LR
    node0{"\\*@5"}
    node1{"-@0"}
    node2["5.0@1"]
    node3{"\\-@47"}
    node4{{"math.cos()@7"}}
    node5{"\\*@28"}
    node6["297.9380535@16"]
    node7{{"query.anim_time()@30"}}
    node8["5.0@49"]
    node1 -->|operand| node2
    node0 -->|left| node1
    node5 -->|left| node6
    node5 -->|right| node7
    node4 -->|arg0| node5
    node3 -->|left| node4
    node3 -->|right| node8
    node0 -->|right| node3"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 19. variable.is_enchanted ? Material.enchanted : Material.default 1`] = `
"flowchart LR
    node0[";@0"]
    node1{"?:@22"}
    node2[["variable.is_enchanted@0"]]
    node3[/"material.enchanted@24"/]
    node4[/"material.default@45"/]
    node4[/"material.default@45"/]
    node1 -->|condition| node2
    node1 -->|true| node3
    node1 -->|false| node4
    node0 -->|stmt0| node1
    node0 -->|stmt1| node4"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 20. variable.has_trim ? variable.trim_path : Texture.default 1`] = `
"flowchart LR
    node0[";@0"]
    node1{"?:@18"}
    node2[["variable.has_trim@0"]]
    node3[["variable.trim_path@20"]]
    node4[/"texture.default@41"/]
    node4[/"texture.default@41"/]
    node1 -->|condition| node2
    node1 -->|true| node3
    node1 -->|false| node4
    node0 -->|stmt0| node1
    node0 -->|stmt1| node4"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 21. !variable.has_trim 1`] = `
"flowchart LR
    node0{"!@0"}
    node1[["variable.has_trim@1"]]
    node0 -->|operand| node1"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 22. array.skins[query.property('minecraft:has_nectar') + query.is_angry * 2] 1`] = `
"flowchart LR
    node0["[]@0"]
    node1[["array.skins@0"]]
    node2{"\\*@68"}
    node3{"\\+@51"}
    node4{{"query.property()@12"}}
    node5["'minecraft:has_nectar'@27"]
    node6{{"query.is_angry()@53"}}
    node7["2@70"]
    node0 -->|array| node1
    node4 -->|arg0| node5
    node3 -->|left| node4
    node3 -->|right| node6
    node2 -->|left| node3
    node2 -->|right| node7
    node0 -->|index| node2"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 23. variable.x_head_rotation = query.target_x_rotation * 32.5; 1`] = `
"flowchart LR
    node0{"=@25"}
    node1[["variable.x_head_rotation@0"]]
    node2{"\\*@51"}
    node3{{"query.target_x_rotation()@27"}}
    node4["32.5@53"]
    node0 -->|target| node1
    node2 -->|left| node3
    node2 -->|right| node4
    node0 -->|value| node2"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 24. variable.x_head_rotation = math.clamp(query.target_x_rotation, -32.5, 32.5); 1`] = `
"flowchart LR
    node0{"=@25"}
    node1[["variable.x_head_rotation@0"]]
    node2{{"math.clamp()@27"}}
    node3{{"query.target_x_rotation()@38"}}
    node4{"-@63"}
    node5["32.5@64"]
    node6["32.5@70"]
    node0 -->|target| node1
    node2 -->|arg0| node3
    node4 -->|operand| node5
    node2 -->|arg1| node4
    node2 -->|arg2| node6
    node0 -->|value| node2"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 25. variable.y_head_rotation = math.clamp(query.target_y_rotation, -22.5, 25); 1`] = `
"flowchart LR
    node0{"=@25"}
    node1[["variable.y_head_rotation@0"]]
    node2{{"math.clamp()@27"}}
    node3{{"query.target_y_rotation()@38"}}
    node4{"-@63"}
    node5["22.5@64"]
    node6["25@70"]
    node0 -->|target| node1
    node2 -->|arg0| node3
    node4 -->|operand| node5
    node2 -->|arg1| node4
    node2 -->|arg2| node6
    node0 -->|value| node2"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 26. variable.is_rolled_up = query.property('minecraft:armadillo_state') != 'unrolled'; 1`] = `
"flowchart LR
    node0{"=@22"}
    node1[["variable.is_rolled_up@0"]]
    node2{"\\!=@68"}
    node3{{"query.property()@24"}}
    node4["'minecraft:armadillo_state'@39"]
    node5["'unrolled'@71"]
    node0 -->|target| node1
    node3 -->|arg0| node4
    node2 -->|left| node3
    node2 -->|right| node5
    node0 -->|value| node2"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 28. variable.is_peeking = query.property('minecraft:armadillo_state') == 'rolled_up_peeking'; 1`] = `
"flowchart LR
    node0{"=@20"}
    node1[["variable.is_peeking@0"]]
    node2{"\\==@66"}
    node3{{"query.property()@22"}}
    node4["'minecraft:armadillo_state'@37"]
    node5["'rolled_up_peeking'@69"]
    node0 -->|target| node1
    node3 -->|arg0| node4
    node2 -->|left| node3
    node2 -->|right| node5
    node0 -->|value| node2"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 29. variable.is_unrolling = query.property('minecraft:armadillo_state') == 'rolled_up_unrolling'; 1`] = `
"flowchart LR
    node0{"=@22"}
    node1[["variable.is_unrolling@0"]]
    node2{"\\==@68"}
    node3{{"query.property()@24"}}
    node4["'minecraft:armadillo_state'@39"]
    node5["'rolled_up_unrolling'@71"]
    node0 -->|target| node1
    node3 -->|arg0| node4
    node2 -->|left| node3
    node2 -->|right| node5
    node0 -->|value| node2"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 32. variable.walking = query.modified_move_speed > 0.01 && !variable.is_rolled_up; 1`] = `
"flowchart LR
    node0{"=@17"}
    node1[["variable.walking@0"]]
    node2{"\\>@45"}
    node3{{"query.modified_move_speed()@19"}}
    node4{"\\&&@52"}
    node5["0.01@47"]
    node6{"!@55"}
    node7[["variable.is_rolled_up@56"]]
    node0 -->|target| node1
    node2 -->|left| node3
    node4 -->|left| node5
    node6 -->|operand| node7
    node4 -->|right| node6
    node2 -->|right| node4
    node0 -->|value| node2"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 33. variable.walk_anim_time_update = query.anim_time + math.min(3.0, math.lerp(2.0, 5.0, query.modified_move_speed)) * query.delta_time; 1`] = `
"flowchart LR
    node0{"=@31"}
    node1[["variable.walk_anim_time_update@0"]]
    node2{"\\*@113"}
    node3{"\\+@49"}
    node4{{"query.anim_time()@33"}}
    node5{{"math.min()@51"}}
    node6["3.0@60"]
    node7{{"math.lerp()@65"}}
    node8["2.0@75"]
    node9["5.0@80"]
    node10{{"query.modified_move_speed()@85"}}
    node11{{"query.delta_time()@115"}}
    node0 -->|target| node1
    node3 -->|left| node4
    node5 -->|arg0| node6
    node7 -->|arg0| node8
    node7 -->|arg1| node9
    node7 -->|arg2| node10
    node5 -->|arg1| node7
    node3 -->|right| node5
    node2 -->|left| node3
    node2 -->|right| node11
    node0 -->|value| node2"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 34. variable.walk_anim_time_update = query.anim_time + math.min(3.0, math.lerp(2.0, 5.0, query.modified_move_speed)) * query.delta_time;variable.y_head_rotation = math.clamp(query.target_y_rotation, -22.5, 25); 1`] = `
"flowchart LR
    node0{"=@31"}
    node1[["variable.walk_anim_time_update@0"]]
    node2{"\\*@113"}
    node3{"\\+@49"}
    node4{{"query.anim_time()@33"}}
    node5{{"math.min()@51"}}
    node6["3.0@60"]
    node7{{"math.lerp()@65"}}
    node8["2.0@75"]
    node9["5.0@80"]
    node10{{"query.modified_move_speed()@85"}}
    node11{{"query.delta_time()@115"}}
    node0 -->|target| node1
    node3 -->|left| node4
    node5 -->|arg0| node6
    node7 -->|arg0| node8
    node7 -->|arg1| node9
    node7 -->|arg2| node10
    node5 -->|arg1| node7
    node3 -->|right| node5
    node2 -->|left| node3
    node2 -->|right| node11
    node0 -->|value| node2"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 34. variable.walk_anim_time_update = query.anim_time + math.min(3.0, math.lerp(2.0, 5.0, query.modified_move_speed)) * query.delta_time;variable.y_head_rotation = math.clamp(query.target_y_rotation, -22.5, 25); 2`] = `
"flowchart LR
    node0{"=@157"}
    node1[["variable.y_head_rotation@132"]]
    node2{{"math.clamp()@159"}}
    node3{{"query.target_y_rotation()@170"}}
    node4{"-@195"}
    node5["22.5@196"]
    node6["25@202"]
    node0 -->|target| node1
    node2 -->|arg0| node3
    node4 -->|operand| node5
    node2 -->|arg1| node4
    node2 -->|arg2| node6
    node0 -->|value| node2"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 35. variable.x_head_rotation = math.clamp(query.target_x_rotation, -32.5, 32.5); 1`] = `
"flowchart LR
    node0{"=@25"}
    node1[["variable.x_head_rotation@0"]]
    node2{{"math.clamp()@27"}}
    node3{{"query.target_x_rotation()@38"}}
    node4{"-@63"}
    node5["32.5@64"]
    node6["32.5@70"]
    node0 -->|target| node1
    node2 -->|arg0| node3
    node4 -->|operand| node5
    node2 -->|arg1| node4
    node2 -->|arg2| node6
    node0 -->|value| node2"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 36. variable.y_head_rotation = math.clamp(query.target_y_rotation, -22.5, 25); 1`] = `
"flowchart LR
    node0{"=@25"}
    node1[["variable.y_head_rotation@0"]]
    node2{{"math.clamp()@27"}}
    node3{{"query.target_y_rotation()@38"}}
    node4{"-@63"}
    node5["22.5@64"]
    node6["25@70"]
    node0 -->|target| node1
    node2 -->|arg0| node3
    node4 -->|operand| node5
    node2 -->|arg1| node4
    node2 -->|arg2| node6
    node0 -->|value| node2"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 37. variable.is_rolled_up = q.property('minecraft:armadillo_state') != 'unrolled'; 1`] = `
"flowchart LR
    node0{"=@22"}
    node1[["variable.is_rolled_up@0"]]
    node2{"\\!=@64"}
    node3{{"q.property()@24"}}
    node4["'minecraft:armadillo_state'@35"]
    node5["'unrolled'@67"]
    node0 -->|target| node1
    node3 -->|arg0| node4
    node2 -->|left| node3
    node2 -->|right| node5
    node0 -->|value| node2"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 39. variable.is_peeking = q.property('minecraft:armadillo_state') == 'rolled_up_peeking'; 1`] = `
"flowchart LR
    node0{"=@20"}
    node1[["variable.is_peeking@0"]]
    node2{"\\==@62"}
    node3{{"q.property()@22"}}
    node4["'minecraft:armadillo_state'@33"]
    node5["'rolled_up_peeking'@65"]
    node0 -->|target| node1
    node3 -->|arg0| node4
    node2 -->|left| node3
    node2 -->|right| node5
    node0 -->|value| node2"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 40. variable.is_unrolling = q.property('minecraft:armadillo_state') == 'rolled_up_unrolling'; 1`] = `
"flowchart LR
    node0{"=@22"}
    node1[["variable.is_unrolling@0"]]
    node2{"\\==@64"}
    node3{{"q.property()@24"}}
    node4["'minecraft:armadillo_state'@35"]
    node5["'rolled_up_unrolling'@67"]
    node0 -->|target| node1
    node3 -->|arg0| node4
    node2 -->|left| node3
    node2 -->|right| node5
    node0 -->|value| node2"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 43. variable.walking = q.modified_move_speed > 0.01 && !variable.is_rolled_up; 1`] = `
"flowchart LR
    node0{"=@17"}
    node1[["variable.walking@0"]]
    node2{"\\>@41"}
    node3{{"q.modified_move_speed()@19"}}
    node4{"\\&&@48"}
    node5["0.01@43"]
    node6{"!@51"}
    node7[["variable.is_rolled_up@52"]]
    node0 -->|target| node1
    node2 -->|left| node3
    node4 -->|left| node5
    node6 -->|operand| node7
    node4 -->|right| node6
    node2 -->|right| node4
    node0 -->|value| node2"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 44. variable.walk_anim_time_update = q.anim_time + math.min(3.0, math.lerp(2.0, 5.0, q.modified_move_speed)) * q.delta_time; 1`] = `
"flowchart LR
    node0{"=@31"}
    node1[["variable.walk_anim_time_update@0"]]
    node2{"\\*@105"}
    node3{"\\+@45"}
    node4{{"q.anim_time()@33"}}
    node5{{"math.min()@47"}}
    node6["3.0@56"]
    node7{{"math.lerp()@61"}}
    node8["2.0@71"]
    node9["5.0@76"]
    node10{{"q.modified_move_speed()@81"}}
    node11{{"q.delta_time()@107"}}
    node0 -->|target| node1
    node3 -->|left| node4
    node5 -->|arg0| node6
    node7 -->|arg0| node8
    node7 -->|arg1| node9
    node7 -->|arg2| node10
    node5 -->|arg1| node7
    node3 -->|right| node5
    node2 -->|left| node3
    node2 -->|right| node11
    node0 -->|value| node2"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 45. variable.walk_anim_time_update = q.anim_time + math.min(3.0, math.lerp(2.0, 5.0, q.modified_move_speed)) * q.delta_time;variable.y_head_rotation = math.clamp(q.target_y_rotation, -22.5, 25); 1`] = `
"flowchart LR
    node0{"=@31"}
    node1[["variable.walk_anim_time_update@0"]]
    node2{"\\*@105"}
    node3{"\\+@45"}
    node4{{"q.anim_time()@33"}}
    node5{{"math.min()@47"}}
    node6["3.0@56"]
    node7{{"math.lerp()@61"}}
    node8["2.0@71"]
    node9["5.0@76"]
    node10{{"q.modified_move_speed()@81"}}
    node11{{"q.delta_time()@107"}}
    node0 -->|target| node1
    node3 -->|left| node4
    node5 -->|arg0| node6
    node7 -->|arg0| node8
    node7 -->|arg1| node9
    node7 -->|arg2| node10
    node5 -->|arg1| node7
    node3 -->|right| node5
    node2 -->|left| node3
    node2 -->|right| node11
    node0 -->|value| node2"
`;

exports[`molang - mermaid - graphs should be able to generate stage diagrams 45. variable.walk_anim_time_update = q.anim_time + math.min(3.0, math.lerp(2.0, 5.0, q.modified_move_speed)) * q.delta_time;variable.y_head_rotation = math.clamp(q.target_y_rotation, -22.5, 25); 2`] = `
"flowchart LR
    node0{"=@145"}
    node1[["variable.y_head_rotation@120"]]
    node2{{"math.clamp()@147"}}
    node3{{"q.target_y_rotation()@158"}}
    node4{"-@179"}
    node5["22.5@180"]
    node6["25@186"]
    node0 -->|target| node1
    node2 -->|arg0| node3
    node4 -->|operand| node5
    node2 -->|arg1| node4
    node2 -->|arg2| node6
    node0 -->|value| node2"
`;
